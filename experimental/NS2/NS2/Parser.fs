// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open System
open NS2.Ast

# 11 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | AT
  | PIPE
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LCURLY
  | RCURLY
  | EQ
  | COMMA
  | SEMICOLON
  | IF
  | ELSE
  | EOF
  | OPEQ of (string)
  | OP of (string)
  | STRING of (string)
  | ID of (string)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_AT
    | TOKEN_PIPE
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_EQ
    | TOKEN_COMMA
    | TOKEN_SEMICOLON
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_EOF
    | TOKEN_OPEQ
    | TOKEN_OP
    | TOKEN_STRING
    | TOKEN_ID
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startmain
    | NONTERM_main
    | NONTERM_expr
    | NONTERM_pipe_expr
    | NONTERM_pipe_entry
    | NONTERM_arr
    | NONTERM_element_list
    | NONTERM_funcblock
    | NONTERM_block
    | NONTERM_body_list
    | NONTERM_call
    | NONTERM_arg_list

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | PLUS  -> 0 
  | MINUS  -> 1 
  | TIMES  -> 2 
  | DIVIDE  -> 3 
  | AT  -> 4 
  | PIPE  -> 5 
  | LPAREN  -> 6 
  | RPAREN  -> 7 
  | LBRACK  -> 8 
  | RBRACK  -> 9 
  | LCURLY  -> 10 
  | RCURLY  -> 11 
  | EQ  -> 12 
  | COMMA  -> 13 
  | SEMICOLON  -> 14 
  | IF  -> 15 
  | ELSE  -> 16 
  | EOF  -> 17 
  | OPEQ _ -> 18 
  | OP _ -> 19 
  | STRING _ -> 20 
  | ID _ -> 21 
  | INT _ -> 22 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_PLUS 
  | 1 -> TOKEN_MINUS 
  | 2 -> TOKEN_TIMES 
  | 3 -> TOKEN_DIVIDE 
  | 4 -> TOKEN_AT 
  | 5 -> TOKEN_PIPE 
  | 6 -> TOKEN_LPAREN 
  | 7 -> TOKEN_RPAREN 
  | 8 -> TOKEN_LBRACK 
  | 9 -> TOKEN_RBRACK 
  | 10 -> TOKEN_LCURLY 
  | 11 -> TOKEN_RCURLY 
  | 12 -> TOKEN_EQ 
  | 13 -> TOKEN_COMMA 
  | 14 -> TOKEN_SEMICOLON 
  | 15 -> TOKEN_IF 
  | 16 -> TOKEN_ELSE 
  | 17 -> TOKEN_EOF 
  | 18 -> TOKEN_OPEQ 
  | 19 -> TOKEN_OP 
  | 20 -> TOKEN_STRING 
  | 21 -> TOKEN_ID 
  | 22 -> TOKEN_INT 
  | 25 -> TOKEN_end_of_input
  | 23 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startmain 
    | 1 -> NONTERM_main 
    | 2 -> NONTERM_expr 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_expr 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_expr 
    | 8 -> NONTERM_expr 
    | 9 -> NONTERM_expr 
    | 10 -> NONTERM_expr 
    | 11 -> NONTERM_expr 
    | 12 -> NONTERM_expr 
    | 13 -> NONTERM_expr 
    | 14 -> NONTERM_expr 
    | 15 -> NONTERM_expr 
    | 16 -> NONTERM_expr 
    | 17 -> NONTERM_expr 
    | 18 -> NONTERM_expr 
    | 19 -> NONTERM_expr 
    | 20 -> NONTERM_expr 
    | 21 -> NONTERM_pipe_expr 
    | 22 -> NONTERM_pipe_expr 
    | 23 -> NONTERM_pipe_entry 
    | 24 -> NONTERM_pipe_entry 
    | 25 -> NONTERM_arr 
    | 26 -> NONTERM_arr 
    | 27 -> NONTERM_element_list 
    | 28 -> NONTERM_element_list 
    | 29 -> NONTERM_funcblock 
    | 30 -> NONTERM_block 
    | 31 -> NONTERM_block 
    | 32 -> NONTERM_body_list 
    | 33 -> NONTERM_body_list 
    | 34 -> NONTERM_body_list 
    | 35 -> NONTERM_call 
    | 36 -> NONTERM_arg_list 
    | 37 -> NONTERM_arg_list 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 25 
let _fsyacc_tagOfErrorTerminal = 23

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIVIDE  -> "DIVIDE" 
  | AT  -> "AT" 
  | PIPE  -> "PIPE" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | LCURLY  -> "LCURLY" 
  | RCURLY  -> "RCURLY" 
  | EQ  -> "EQ" 
  | COMMA  -> "COMMA" 
  | SEMICOLON  -> "SEMICOLON" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | EOF  -> "EOF" 
  | OPEQ _ -> "OPEQ" 
  | OP _ -> "OP" 
  | STRING _ -> "STRING" 
  | ID _ -> "ID" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | AT  -> (null : System.Object) 
  | PIPE  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | LCURLY  -> (null : System.Object) 
  | RCURLY  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | OPEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;19us;65535us;0us;18us;3us;4us;19us;19us;20us;7us;21us;6us;22us;8us;23us;9us;24us;10us;25us;11us;26us;12us;27us;13us;28us;14us;30us;15us;39us;19us;42us;16us;44us;17us;48us;17us;51us;18us;55us;18us;19us;65535us;0us;32us;3us;32us;19us;32us;20us;32us;21us;32us;22us;32us;23us;32us;24us;32us;25us;32us;26us;32us;27us;32us;28us;32us;30us;32us;39us;32us;42us;33us;44us;32us;48us;32us;51us;32us;55us;32us;19us;65535us;0us;41us;3us;41us;19us;41us;20us;41us;21us;41us;22us;41us;23us;41us;24us;41us;25us;41us;26us;41us;27us;41us;28us;41us;30us;41us;39us;41us;42us;40us;44us;41us;48us;41us;51us;41us;55us;41us;19us;65535us;0us;31us;3us;31us;19us;31us;20us;31us;21us;31us;22us;31us;23us;31us;24us;31us;25us;31us;26us;31us;27us;31us;28us;31us;30us;31us;39us;31us;42us;31us;44us;31us;48us;31us;51us;31us;55us;31us;2us;65535us;44us;46us;48us;49us;33us;65535us;0us;43us;3us;43us;4us;34us;6us;34us;7us;34us;8us;34us;9us;34us;10us;34us;11us;34us;12us;34us;13us;34us;14us;34us;15us;34us;16us;34us;17us;34us;18us;34us;19us;35us;20us;43us;21us;43us;22us;43us;23us;43us;24us;43us;25us;43us;26us;43us;27us;43us;28us;29us;30us;43us;39us;43us;42us;43us;44us;43us;48us;43us;51us;43us;55us;43us;33us;65535us;0us;50us;3us;50us;4us;50us;6us;50us;7us;50us;8us;50us;9us;50us;10us;50us;11us;50us;12us;50us;13us;50us;14us;50us;15us;50us;16us;50us;17us;50us;18us;50us;19us;50us;20us;50us;21us;50us;22us;50us;23us;50us;24us;50us;25us;50us;26us;50us;27us;50us;28us;50us;30us;50us;39us;50us;42us;50us;44us;50us;48us;50us;51us;50us;55us;50us;3us;65535us;0us;2us;51us;53us;55us;56us;19us;65535us;0us;38us;3us;38us;19us;38us;20us;38us;21us;38us;22us;38us;23us;38us;24us;38us;25us;38us;26us;38us;27us;38us;28us;38us;30us;38us;39us;38us;42us;38us;44us;38us;48us;38us;51us;38us;55us;38us;2us;65535us;19us;58us;39us;57us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;23us;43us;63us;83us;86us;120us;154us;158us;178us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;2us;12us;2us;3us;4us;5us;6us;7us;8us;9us;10us;11us;15us;23us;1us;2us;13us;3us;3us;4us;5us;6us;7us;8us;9us;10us;11us;12us;15us;23us;12us;3us;3us;4us;5us;6us;7us;8us;9us;10us;11us;15us;23us;12us;3us;4us;4us;5us;6us;7us;8us;9us;10us;11us;15us;23us;12us;3us;4us;5us;5us;6us;7us;8us;9us;10us;11us;15us;23us;12us;3us;4us;5us;6us;6us;7us;8us;9us;10us;11us;15us;23us;12us;3us;4us;5us;6us;7us;7us;8us;9us;10us;11us;15us;23us;12us;3us;4us;5us;6us;7us;8us;8us;9us;10us;11us;15us;23us;12us;3us;4us;5us;6us;7us;8us;9us;9us;10us;11us;15us;23us;12us;3us;4us;5us;6us;7us;8us;9us;10us;10us;11us;15us;23us;12us;3us;4us;5us;6us;7us;8us;9us;10us;11us;12us;15us;23us;11us;3us;4us;5us;6us;7us;8us;9us;10us;11us;15us;23us;13us;3us;4us;5us;6us;7us;8us;9us;10us;11us;15us;23us;27us;28us;14us;3us;4us;5us;6us;7us;8us;9us;10us;11us;15us;23us;32us;33us;34us;13us;3us;4us;5us;6us;7us;8us;9us;10us;11us;15us;23us;36us;37us;1us;3us;3us;3us;12us;20us;1us;4us;1us;5us;1us;6us;1us;7us;1us;8us;1us;9us;2us;10us;11us;2us;11us;24us;2us;12us;20us;1us;13us;1us;14us;2us;14us;22us;1us;15us;2us;15us;24us;1us;16us;1us;17us;1us;18us;2us;19us;35us;3us;21us;21us;22us;2us;21us;22us;2us;21us;22us;1us;24us;2us;25us;26us;1us;25us;1us;26us;1us;26us;1us;28us;1us;28us;1us;29us;2us;30us;31us;1us;30us;1us;31us;1us;31us;2us;33us;34us;1us;34us;1us;35us;1us;37us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;21us;23us;37us;50us;63us;76us;89us;102us;115us;128us;141us;154us;166us;180us;195us;209us;211us;215us;217us;219us;221us;223us;225us;227us;230us;233us;236us;238us;240us;243us;245us;248us;250us;252us;254us;257us;261us;264us;267us;269us;272us;274us;276us;278us;280us;282us;284us;287us;289us;291us;293us;296us;298us;300us;|]
let _fsyacc_action_rows = 59
let _fsyacc_actionTableElements = [|7us;32768us;6us;3us;8us;44us;10us;51us;19us;30us;20us;37us;21us;39us;22us;36us;0us;49152us;0us;16385us;7us;32768us;6us;3us;8us;44us;10us;51us;19us;30us;20us;37us;21us;39us;22us;36us;10us;16407us;0us;22us;1us;23us;2us;24us;3us;25us;4us;26us;7us;5us;10us;51us;12us;28us;18us;27us;19us;20us;0us;16386us;9us;16387us;0us;22us;1us;23us;2us;24us;3us;25us;4us;26us;10us;51us;12us;28us;18us;27us;19us;20us;9us;16387us;0us;22us;1us;23us;2us;24us;3us;25us;4us;26us;10us;51us;12us;28us;18us;27us;19us;20us;7us;16388us;2us;24us;3us;25us;4us;26us;10us;51us;12us;28us;18us;27us;19us;20us;7us;16389us;2us;24us;3us;25us;4us;26us;10us;51us;12us;28us;18us;27us;19us;20us;5us;16390us;4us;26us;10us;51us;12us;28us;18us;27us;19us;20us;5us;16391us;4us;26us;10us;51us;12us;28us;18us;27us;19us;20us;4us;16392us;10us;51us;12us;28us;18us;27us;19us;20us;9us;16393us;0us;22us;1us;23us;2us;24us;3us;25us;4us;26us;10us;51us;12us;28us;18us;27us;19us;20us;9us;16394us;0us;22us;1us;23us;2us;24us;3us;25us;4us;26us;10us;51us;12us;28us;18us;27us;19us;20us;9us;16396us;0us;22us;1us;23us;2us;24us;3us;25us;4us;26us;10us;51us;12us;28us;18us;27us;19us;20us;9us;16407us;0us;22us;1us;23us;2us;24us;3us;25us;4us;26us;10us;51us;12us;28us;18us;27us;19us;20us;11us;16407us;0us;22us;1us;23us;2us;24us;3us;25us;4us;26us;9us;16411us;10us;51us;12us;28us;13us;48us;18us;27us;19us;20us;12us;16407us;0us;22us;1us;23us;2us;24us;3us;25us;4us;26us;10us;51us;11us;16416us;12us;28us;14us;55us;18us;27us;19us;20us;25us;16416us;20us;16407us;0us;22us;1us;23us;2us;24us;3us;25us;4us;26us;6us;3us;7us;16420us;8us;44us;9us;16420us;10us;51us;11us;16420us;12us;28us;13us;16420us;14us;16420us;18us;27us;19us;21us;20us;37us;21us;39us;22us;36us;25us;16420us;7us;32768us;6us;3us;8us;44us;10us;51us;19us;30us;20us;37us;21us;39us;22us;36us;7us;16404us;6us;3us;8us;44us;10us;51us;19us;30us;20us;37us;21us;39us;22us;36us;7us;32768us;6us;3us;8us;44us;10us;51us;19us;30us;20us;37us;21us;39us;22us;36us;7us;32768us;6us;3us;8us;44us;10us;51us;19us;30us;20us;37us;21us;39us;22us;36us;7us;32768us;6us;3us;8us;44us;10us;51us;19us;30us;20us;37us;21us;39us;22us;36us;7us;32768us;6us;3us;8us;44us;10us;51us;19us;30us;20us;37us;21us;39us;22us;36us;7us;32768us;6us;3us;8us;44us;10us;51us;19us;30us;20us;37us;21us;39us;22us;36us;7us;32768us;6us;3us;8us;44us;10us;51us;19us;30us;20us;37us;21us;39us;22us;36us;7us;32768us;6us;3us;8us;44us;10us;51us;19us;30us;20us;37us;21us;39us;22us;36us;0us;16395us;7us;16404us;6us;3us;8us;44us;10us;51us;19us;30us;20us;37us;21us;39us;22us;36us;0us;16397us;0us;16398us;0us;16398us;0us;16399us;0us;16399us;0us;16400us;0us;16401us;0us;16402us;7us;16403us;6us;3us;8us;44us;10us;51us;19us;30us;20us;37us;21us;39us;22us;36us;1us;16405us;5us;42us;1us;32768us;5us;42us;7us;32768us;6us;3us;8us;44us;10us;51us;19us;30us;20us;37us;21us;39us;22us;36us;0us;16408us;8us;32768us;6us;3us;8us;44us;9us;45us;10us;51us;19us;30us;20us;37us;21us;39us;22us;36us;0us;16409us;1us;32768us;9us;47us;0us;16410us;7us;32768us;6us;3us;8us;44us;10us;51us;19us;30us;20us;37us;21us;39us;22us;36us;0us;16412us;0us;16413us;8us;32768us;6us;3us;8us;44us;10us;51us;11us;52us;19us;30us;20us;37us;21us;39us;22us;36us;0us;16414us;1us;32768us;11us;54us;0us;16415us;7us;16417us;6us;3us;8us;44us;10us;51us;19us;30us;20us;37us;21us;39us;22us;36us;0us;16418us;0us;16419us;0us;16421us;|]
let _fsyacc_actionTableRowOffsets = [|0us;8us;9us;10us;18us;29us;30us;40us;50us;58us;66us;72us;78us;83us;93us;103us;113us;123us;135us;148us;169us;177us;185us;193us;201us;209us;217us;225us;233us;241us;242us;250us;251us;252us;253us;254us;255us;256us;257us;258us;266us;268us;270us;278us;279us;288us;289us;291us;292us;300us;301us;302us;311us;312us;314us;315us;323us;324us;325us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;2us;1us;1us;2us;1us;1us;1us;1us;1us;3us;3us;1us;1us;2us;3us;1us;3us;1us;2us;3us;1us;2us;3us;2us;1us;2us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;3us;3us;4us;4us;5us;5us;6us;6us;7us;8us;8us;9us;9us;9us;10us;11us;11us;|]
let _fsyacc_immediateActions = [|65535us;49152us;16385us;65535us;65535us;16386us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16397us;16398us;65535us;16399us;65535us;16400us;16401us;16402us;65535us;65535us;65535us;65535us;16408us;65535us;16409us;65535us;16410us;65535us;16412us;16413us;65535us;16414us;65535us;16415us;65535us;16418us;16419us;16421us;|]
let _fsyacc_reductions = lazy [|
# 246 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> NS2.Ast.AST in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startmain));
# 255 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_body_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "Parser.fsy"
                                  Root _1 
                   )
# 29 "Parser.fsy"
                 : NS2.Ast.AST));
# 266 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                                    _2 
                   )
# 32 "Parser.fsy"
                 : 'gentype_expr));
# 277 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                                Binop (_1, _2, _3) 
                   )
# 33 "Parser.fsy"
                 : 'gentype_expr));
# 290 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                              Binop (_1, "+", _3) 
                   )
# 34 "Parser.fsy"
                 : 'gentype_expr));
# 302 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                              Binop (_1, "-", _3) 
                   )
# 35 "Parser.fsy"
                 : 'gentype_expr));
# 314 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                              Binop (_1, "*", _3) 
                   )
# 36 "Parser.fsy"
                 : 'gentype_expr));
# 326 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                                Binop (_1, "/", _3) 
                   )
# 37 "Parser.fsy"
                 : 'gentype_expr));
# 338 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                             Index (_1, _3) 
                   )
# 38 "Parser.fsy"
                 : 'gentype_expr));
# 350 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                                            Assign (_1, Binop(_1, _2[.._2.Length-2], _3))
                   )
# 39 "Parser.fsy"
                 : 'gentype_expr));
# 363 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                                            Assign (_1, _3)
                   )
# 40 "Parser.fsy"
                 : 'gentype_expr));
# 375 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_funcblock in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                                            Assign (_1, _3)
                   )
# 41 "Parser.fsy"
                 : 'gentype_expr));
# 387 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                                            Unaryop (_1, _2)
                   )
# 42 "Parser.fsy"
                 : 'gentype_expr));
# 399 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_arr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                      _1 
                   )
# 43 "Parser.fsy"
                 : 'gentype_expr));
# 410 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pipe_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                          Pipe _1 
                   )
# 44 "Parser.fsy"
                 : 'gentype_expr));
# 421 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _2 = parseState.GetInput(2) :?> 'gentype_funcblock in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                              Map (_1, _2) 
                   )
# 45 "Parser.fsy"
                 : 'gentype_expr));
# 433 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                     Int _1 
                   )
# 46 "Parser.fsy"
                 : 'gentype_expr));
# 444 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                       String _1 
                   )
# 47 "Parser.fsy"
                 : 'gentype_expr));
# 455 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_call in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                         _1 
                   )
# 48 "Parser.fsy"
                 : 'gentype_expr));
# 466 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                    Id _1 
                   )
# 49 "Parser.fsy"
                 : 'gentype_expr));
# 477 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                    Id _1 
                   )
# 50 "Parser.fsy"
                 : 'gentype_expr));
# 488 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pipe_entry in
            let _3 = parseState.GetInput(3) :?> 'gentype_pipe_entry in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                                                     [_1;_3] 
                   )
# 53 "Parser.fsy"
                 : 'gentype_pipe_expr));
# 500 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pipe_entry in
            let _3 = parseState.GetInput(3) :?> 'gentype_pipe_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                                     _1::_3 
                   )
# 54 "Parser.fsy"
                 : 'gentype_pipe_expr));
# 512 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                              _1
                   )
# 57 "Parser.fsy"
                 : 'gentype_pipe_entry));
# 523 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_funcblock in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                              _1
                   )
# 58 "Parser.fsy"
                 : 'gentype_pipe_entry));
# 534 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                             Array [] 
                   )
# 61 "Parser.fsy"
                 : 'gentype_arr));
# 544 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_element_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                      Array _2 
                   )
# 62 "Parser.fsy"
                 : 'gentype_arr));
# 555 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                      [_1] 
                   )
# 65 "Parser.fsy"
                 : 'gentype_element_list));
# 566 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_element_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                                     _1 :: _3 
                   )
# 66 "Parser.fsy"
                 : 'gentype_element_list));
# 578 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                               Func _1 
                   )
# 69 "Parser.fsy"
                 : 'gentype_funcblock));
# 589 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                             Block [] 
                   )
# 72 "Parser.fsy"
                 : 'gentype_block));
# 599 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_body_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                                    Block _2 
                   )
# 73 "Parser.fsy"
                 : 'gentype_block));
# 610 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                      [_1] 
                   )
# 76 "Parser.fsy"
                 : 'gentype_body_list));
# 621 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                             [_1] 
                   )
# 77 "Parser.fsy"
                 : 'gentype_body_list));
# 632 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_body_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                      _1 :: _3 
                   )
# 78 "Parser.fsy"
                 : 'gentype_body_list));
# 644 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_arg_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                               Call (_1, _2)
                   )
# 81 "Parser.fsy"
                 : 'gentype_call));
# 656 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                      [_1] 
                   )
# 84 "Parser.fsy"
                 : 'gentype_arg_list));
# 667 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _2 = parseState.GetInput(2) :?> 'gentype_arg_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                   _1 :: _2 
                   )
# 85 "Parser.fsy"
                 : 'gentype_arg_list));
|]
# 680 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 26;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let main lexer lexbuf : NS2.Ast.AST =
    engine lexer lexbuf 0 :?> _
