// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open System
open NS2.Ast

# 11 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | AT
  | POW
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LCURLY
  | RCURLY
  | EQ
  | COMMA
  | SEMICOLON
  | EOF
  | STRING of (string)
  | ID of (string)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_AT
    | TOKEN_POW
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_EQ
    | TOKEN_COMMA
    | TOKEN_SEMICOLON
    | TOKEN_EOF
    | TOKEN_STRING
    | TOKEN_ID
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startmain
    | NONTERM_main
    | NONTERM_expr
    | NONTERM_arr
    | NONTERM_element_list
    | NONTERM_func
    | NONTERM_body_list

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | PLUS  -> 0 
  | MINUS  -> 1 
  | TIMES  -> 2 
  | DIVIDE  -> 3 
  | AT  -> 4 
  | POW  -> 5 
  | LPAREN  -> 6 
  | RPAREN  -> 7 
  | LBRACK  -> 8 
  | RBRACK  -> 9 
  | LCURLY  -> 10 
  | RCURLY  -> 11 
  | EQ  -> 12 
  | COMMA  -> 13 
  | SEMICOLON  -> 14 
  | EOF  -> 15 
  | STRING _ -> 16 
  | ID _ -> 17 
  | INT _ -> 18 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_PLUS 
  | 1 -> TOKEN_MINUS 
  | 2 -> TOKEN_TIMES 
  | 3 -> TOKEN_DIVIDE 
  | 4 -> TOKEN_AT 
  | 5 -> TOKEN_POW 
  | 6 -> TOKEN_LPAREN 
  | 7 -> TOKEN_RPAREN 
  | 8 -> TOKEN_LBRACK 
  | 9 -> TOKEN_RBRACK 
  | 10 -> TOKEN_LCURLY 
  | 11 -> TOKEN_RCURLY 
  | 12 -> TOKEN_EQ 
  | 13 -> TOKEN_COMMA 
  | 14 -> TOKEN_SEMICOLON 
  | 15 -> TOKEN_EOF 
  | 16 -> TOKEN_STRING 
  | 17 -> TOKEN_ID 
  | 18 -> TOKEN_INT 
  | 21 -> TOKEN_end_of_input
  | 19 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startmain 
    | 1 -> NONTERM_main 
    | 2 -> NONTERM_expr 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_expr 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_expr 
    | 8 -> NONTERM_expr 
    | 9 -> NONTERM_expr 
    | 10 -> NONTERM_expr 
    | 11 -> NONTERM_expr 
    | 12 -> NONTERM_expr 
    | 13 -> NONTERM_expr 
    | 14 -> NONTERM_expr 
    | 15 -> NONTERM_expr 
    | 16 -> NONTERM_arr 
    | 17 -> NONTERM_arr 
    | 18 -> NONTERM_element_list 
    | 19 -> NONTERM_element_list 
    | 20 -> NONTERM_func 
    | 21 -> NONTERM_func 
    | 22 -> NONTERM_body_list 
    | 23 -> NONTERM_body_list 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 21 
let _fsyacc_tagOfErrorTerminal = 19

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIVIDE  -> "DIVIDE" 
  | AT  -> "AT" 
  | POW  -> "POW" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | LCURLY  -> "LCURLY" 
  | RCURLY  -> "RCURLY" 
  | EQ  -> "EQ" 
  | COMMA  -> "COMMA" 
  | SEMICOLON  -> "SEMICOLON" 
  | EOF  -> "EOF" 
  | STRING _ -> "STRING" 
  | ID _ -> "ID" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | AT  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | LCURLY  -> (null : System.Object) 
  | RCURLY  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;13us;65535us;0us;14us;3us;4us;15us;6us;16us;7us;17us;8us;18us;9us;19us;10us;20us;11us;22us;12us;28us;13us;32us;13us;34us;14us;38us;14us;13us;65535us;0us;21us;3us;21us;15us;21us;16us;21us;17us;21us;18us;21us;19us;21us;20us;21us;22us;21us;28us;21us;32us;21us;34us;21us;38us;21us;2us;65535us;28us;30us;32us;33us;23us;65535us;0us;23us;3us;23us;4us;24us;6us;24us;7us;24us;8us;24us;9us;24us;10us;24us;11us;24us;12us;24us;13us;24us;14us;24us;15us;23us;16us;23us;17us;23us;18us;23us;19us;23us;20us;23us;22us;23us;28us;23us;32us;23us;34us;23us;38us;23us;3us;65535us;0us;2us;34us;36us;38us;39us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;17us;31us;34us;58us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;2us;9us;2us;3us;4us;5us;6us;7us;8us;10us;12us;1us;2us;9us;3us;3us;4us;5us;6us;7us;8us;10us;12us;9us;3us;4us;4us;5us;6us;7us;8us;10us;12us;9us;3us;4us;5us;5us;6us;7us;8us;10us;12us;9us;3us;4us;5us;6us;6us;7us;8us;10us;12us;9us;3us;4us;5us;6us;7us;7us;8us;10us;12us;9us;3us;4us;5us;6us;7us;8us;8us;10us;12us;9us;3us;4us;5us;6us;7us;8us;10us;10us;12us;10us;3us;4us;5us;6us;7us;8us;10us;12us;18us;19us;10us;3us;4us;5us;6us;7us;8us;10us;12us;22us;23us;1us;3us;1us;4us;1us;5us;1us;6us;1us;7us;1us;8us;1us;9us;1us;10us;1us;11us;1us;12us;1us;13us;1us;14us;1us;15us;2us;16us;17us;1us;16us;1us;17us;1us;17us;1us;19us;1us;19us;2us;20us;21us;1us;20us;1us;21us;1us;21us;1us;23us;1us;23us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;18us;20us;30us;40us;50us;60us;70us;80us;90us;101us;112us;114us;116us;118us;120us;122us;124us;126us;128us;130us;132us;134us;136us;138us;141us;143us;145us;147us;149us;151us;154us;156us;158us;160us;162us;|]
let _fsyacc_action_rows = 40
let _fsyacc_actionTableElements = [|6us;32768us;6us;3us;8us;28us;10us;34us;16us;26us;17us;27us;18us;25us;0us;49152us;0us;16385us;6us;32768us;6us;3us;8us;28us;10us;34us;16us;26us;17us;27us;18us;25us;9us;32768us;0us;15us;1us;16us;2us;17us;3us;19us;4us;22us;5us;18us;7us;5us;10us;34us;12us;20us;0us;16386us;6us;16387us;2us;17us;3us;19us;4us;22us;5us;18us;10us;34us;12us;20us;6us;16388us;2us;17us;3us;19us;4us;22us;5us;18us;10us;34us;12us;20us;4us;16389us;4us;22us;5us;18us;10us;34us;12us;20us;3us;16390us;4us;22us;10us;34us;12us;20us;4us;16391us;4us;22us;5us;18us;10us;34us;12us;20us;8us;16392us;0us;15us;1us;16us;2us;17us;3us;19us;4us;22us;5us;18us;10us;34us;12us;20us;2us;16394us;10us;34us;12us;20us;9us;16402us;0us;15us;1us;16us;2us;17us;3us;19us;4us;22us;5us;18us;10us;34us;12us;20us;13us;32us;9us;16406us;0us;15us;1us;16us;2us;17us;3us;19us;4us;22us;5us;18us;10us;34us;12us;20us;14us;38us;6us;32768us;6us;3us;8us;28us;10us;34us;16us;26us;17us;27us;18us;25us;6us;32768us;6us;3us;8us;28us;10us;34us;16us;26us;17us;27us;18us;25us;6us;32768us;6us;3us;8us;28us;10us;34us;16us;26us;17us;27us;18us;25us;6us;32768us;6us;3us;8us;28us;10us;34us;16us;26us;17us;27us;18us;25us;6us;32768us;6us;3us;8us;28us;10us;34us;16us;26us;17us;27us;18us;25us;6us;32768us;6us;3us;8us;28us;10us;34us;16us;26us;17us;27us;18us;25us;0us;16393us;6us;32768us;6us;3us;8us;28us;10us;34us;16us;26us;17us;27us;18us;25us;0us;16395us;0us;16396us;0us;16397us;0us;16398us;0us;16399us;7us;32768us;6us;3us;8us;28us;9us;29us;10us;34us;16us;26us;17us;27us;18us;25us;0us;16400us;1us;32768us;9us;31us;0us;16401us;6us;32768us;6us;3us;8us;28us;10us;34us;16us;26us;17us;27us;18us;25us;0us;16403us;7us;32768us;6us;3us;8us;28us;10us;34us;11us;35us;16us;26us;17us;27us;18us;25us;0us;16404us;1us;32768us;11us;37us;0us;16405us;6us;32768us;6us;3us;8us;28us;10us;34us;16us;26us;17us;27us;18us;25us;0us;16407us;|]
let _fsyacc_actionTableRowOffsets = [|0us;7us;8us;9us;16us;26us;27us;34us;41us;46us;50us;55us;64us;67us;77us;87us;94us;101us;108us;115us;122us;129us;130us;137us;138us;139us;140us;141us;142us;150us;151us;153us;154us;161us;162us;170us;171us;173us;174us;181us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;3us;3us;3us;3us;3us;3us;3us;1us;3us;1us;2us;1us;1us;1us;2us;3us;1us;3us;2us;3us;1us;3us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;3us;3us;4us;4us;5us;5us;6us;6us;|]
let _fsyacc_immediateActions = [|65535us;49152us;16385us;65535us;65535us;16386us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16393us;65535us;16395us;16396us;16397us;16398us;16399us;65535us;16400us;65535us;16401us;65535us;16403us;65535us;16404us;65535us;16405us;65535us;16407us;|]
let _fsyacc_reductions = lazy [|
# 203 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> NS2.Ast.AST in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startmain));
# 212 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_body_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "Parser.fsy"
                                  Root _1 
                   )
# 27 "Parser.fsy"
                 : NS2.Ast.AST));
# 223 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                                                    _2 
                   )
# 30 "Parser.fsy"
                 : 'gentype_expr));
# 234 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsy"
                                              Binop (_1, "+", _3) 
                   )
# 31 "Parser.fsy"
                 : 'gentype_expr));
# 246 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                              Binop (_1, "-", _3) 
                   )
# 32 "Parser.fsy"
                 : 'gentype_expr));
# 258 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                              Binop (_1, "*", _3) 
                   )
# 33 "Parser.fsy"
                 : 'gentype_expr));
# 270 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                             Binop (_1, "**", _3) 
                   )
# 34 "Parser.fsy"
                 : 'gentype_expr));
# 282 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                                Binop (_1, "/", _3) 
                   )
# 35 "Parser.fsy"
                 : 'gentype_expr));
# 294 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                                            Assign (_1, _3)
                   )
# 36 "Parser.fsy"
                 : 'gentype_expr));
# 306 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_arr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                      _1 
                   )
# 37 "Parser.fsy"
                 : 'gentype_expr));
# 317 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                             Index (_1, _3) 
                   )
# 38 "Parser.fsy"
                 : 'gentype_expr));
# 329 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_func in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                       _1 
                   )
# 39 "Parser.fsy"
                 : 'gentype_expr));
# 340 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _2 = parseState.GetInput(2) :?> 'gentype_func in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                          Map (_1, _2) 
                   )
# 40 "Parser.fsy"
                 : 'gentype_expr));
# 352 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                     Int _1 
                   )
# 41 "Parser.fsy"
                 : 'gentype_expr));
# 363 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                       String _1 
                   )
# 42 "Parser.fsy"
                 : 'gentype_expr));
# 374 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                    Id _1 
                   )
# 43 "Parser.fsy"
                 : 'gentype_expr));
# 385 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                             Array [] 
                   )
# 46 "Parser.fsy"
                 : 'gentype_arr));
# 395 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_element_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                      Array _2 
                   )
# 47 "Parser.fsy"
                 : 'gentype_arr));
# 406 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                      [_1] 
                   )
# 50 "Parser.fsy"
                 : 'gentype_element_list));
# 417 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_element_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                     _1 :: _3 
                   )
# 51 "Parser.fsy"
                 : 'gentype_element_list));
# 429 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                             Func [] 
                   )
# 54 "Parser.fsy"
                 : 'gentype_func));
# 439 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_body_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                    Func _2 
                   )
# 55 "Parser.fsy"
                 : 'gentype_func));
# 450 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                      [_1] 
                   )
# 58 "Parser.fsy"
                 : 'gentype_body_list));
# 461 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_body_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                      _1 :: _3 
                   )
# 59 "Parser.fsy"
                 : 'gentype_body_list));
|]
# 474 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 22;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let main lexer lexbuf : NS2.Ast.AST =
    engine lexer lexbuf 0 :?> _
