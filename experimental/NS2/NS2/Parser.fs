// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open System
open NS2.Ast

# 11 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | AT
  | PIPE
  | HASH
  | EQ
  | NEQ
  | EQEQ
  | GE
  | LE
  | GEQ
  | LEQ
  | AND
  | OR
  | NOT
  | MODULO
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LCURLY
  | RCURLY
  | COMMA
  | SEMICOLON
  | COLON
  | IF
  | ELSE
  | WHILE
  | EOF
  | OPEQ of (string)
  | STRING of (string)
  | ID of (string)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_AT
    | TOKEN_PIPE
    | TOKEN_HASH
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_EQEQ
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_GEQ
    | TOKEN_LEQ
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_NOT
    | TOKEN_MODULO
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_COMMA
    | TOKEN_SEMICOLON
    | TOKEN_COLON
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_WHILE
    | TOKEN_EOF
    | TOKEN_OPEQ
    | TOKEN_STRING
    | TOKEN_ID
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startmain
    | NONTERM_main
    | NONTERM_expr
    | NONTERM_op
    | NONTERM_while_expr
    | NONTERM_while_body
    | NONTERM_if_expr
    | NONTERM_if_body
    | NONTERM_pipe_expr
    | NONTERM_pipe_entry
    | NONTERM_arr
    | NONTERM_element_list
    | NONTERM_funcblock
    | NONTERM_block
    | NONTERM_body_list
    | NONTERM_call
    | NONTERM_arg_list

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | PLUS  -> 0 
  | MINUS  -> 1 
  | TIMES  -> 2 
  | DIVIDE  -> 3 
  | AT  -> 4 
  | PIPE  -> 5 
  | HASH  -> 6 
  | EQ  -> 7 
  | NEQ  -> 8 
  | EQEQ  -> 9 
  | GE  -> 10 
  | LE  -> 11 
  | GEQ  -> 12 
  | LEQ  -> 13 
  | AND  -> 14 
  | OR  -> 15 
  | NOT  -> 16 
  | MODULO  -> 17 
  | LPAREN  -> 18 
  | RPAREN  -> 19 
  | LBRACK  -> 20 
  | RBRACK  -> 21 
  | LCURLY  -> 22 
  | RCURLY  -> 23 
  | COMMA  -> 24 
  | SEMICOLON  -> 25 
  | COLON  -> 26 
  | IF  -> 27 
  | ELSE  -> 28 
  | WHILE  -> 29 
  | EOF  -> 30 
  | OPEQ _ -> 31 
  | STRING _ -> 32 
  | ID _ -> 33 
  | INT _ -> 34 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_PLUS 
  | 1 -> TOKEN_MINUS 
  | 2 -> TOKEN_TIMES 
  | 3 -> TOKEN_DIVIDE 
  | 4 -> TOKEN_AT 
  | 5 -> TOKEN_PIPE 
  | 6 -> TOKEN_HASH 
  | 7 -> TOKEN_EQ 
  | 8 -> TOKEN_NEQ 
  | 9 -> TOKEN_EQEQ 
  | 10 -> TOKEN_GE 
  | 11 -> TOKEN_LE 
  | 12 -> TOKEN_GEQ 
  | 13 -> TOKEN_LEQ 
  | 14 -> TOKEN_AND 
  | 15 -> TOKEN_OR 
  | 16 -> TOKEN_NOT 
  | 17 -> TOKEN_MODULO 
  | 18 -> TOKEN_LPAREN 
  | 19 -> TOKEN_RPAREN 
  | 20 -> TOKEN_LBRACK 
  | 21 -> TOKEN_RBRACK 
  | 22 -> TOKEN_LCURLY 
  | 23 -> TOKEN_RCURLY 
  | 24 -> TOKEN_COMMA 
  | 25 -> TOKEN_SEMICOLON 
  | 26 -> TOKEN_COLON 
  | 27 -> TOKEN_IF 
  | 28 -> TOKEN_ELSE 
  | 29 -> TOKEN_WHILE 
  | 30 -> TOKEN_EOF 
  | 31 -> TOKEN_OPEQ 
  | 32 -> TOKEN_STRING 
  | 33 -> TOKEN_ID 
  | 34 -> TOKEN_INT 
  | 37 -> TOKEN_end_of_input
  | 35 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startmain 
    | 1 -> NONTERM_main 
    | 2 -> NONTERM_main 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_expr 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_expr 
    | 8 -> NONTERM_expr 
    | 9 -> NONTERM_expr 
    | 10 -> NONTERM_expr 
    | 11 -> NONTERM_expr 
    | 12 -> NONTERM_expr 
    | 13 -> NONTERM_expr 
    | 14 -> NONTERM_expr 
    | 15 -> NONTERM_expr 
    | 16 -> NONTERM_expr 
    | 17 -> NONTERM_expr 
    | 18 -> NONTERM_expr 
    | 19 -> NONTERM_expr 
    | 20 -> NONTERM_expr 
    | 21 -> NONTERM_expr 
    | 22 -> NONTERM_expr 
    | 23 -> NONTERM_expr 
    | 24 -> NONTERM_expr 
    | 25 -> NONTERM_expr 
    | 26 -> NONTERM_expr 
    | 27 -> NONTERM_expr 
    | 28 -> NONTERM_expr 
    | 29 -> NONTERM_expr 
    | 30 -> NONTERM_expr 
    | 31 -> NONTERM_expr 
    | 32 -> NONTERM_expr 
    | 33 -> NONTERM_op 
    | 34 -> NONTERM_op 
    | 35 -> NONTERM_while_expr 
    | 36 -> NONTERM_while_body 
    | 37 -> NONTERM_while_body 
    | 38 -> NONTERM_if_expr 
    | 39 -> NONTERM_if_expr 
    | 40 -> NONTERM_if_body 
    | 41 -> NONTERM_if_body 
    | 42 -> NONTERM_pipe_expr 
    | 43 -> NONTERM_pipe_expr 
    | 44 -> NONTERM_pipe_entry 
    | 45 -> NONTERM_pipe_entry 
    | 46 -> NONTERM_arr 
    | 47 -> NONTERM_arr 
    | 48 -> NONTERM_element_list 
    | 49 -> NONTERM_element_list 
    | 50 -> NONTERM_funcblock 
    | 51 -> NONTERM_block 
    | 52 -> NONTERM_block 
    | 53 -> NONTERM_body_list 
    | 54 -> NONTERM_body_list 
    | 55 -> NONTERM_body_list 
    | 56 -> NONTERM_call 
    | 57 -> NONTERM_arg_list 
    | 58 -> NONTERM_arg_list 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 37 
let _fsyacc_tagOfErrorTerminal = 35

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIVIDE  -> "DIVIDE" 
  | AT  -> "AT" 
  | PIPE  -> "PIPE" 
  | HASH  -> "HASH" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | EQEQ  -> "EQEQ" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | GEQ  -> "GEQ" 
  | LEQ  -> "LEQ" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | NOT  -> "NOT" 
  | MODULO  -> "MODULO" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | LCURLY  -> "LCURLY" 
  | RCURLY  -> "RCURLY" 
  | COMMA  -> "COMMA" 
  | SEMICOLON  -> "SEMICOLON" 
  | COLON  -> "COLON" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | WHILE  -> "WHILE" 
  | EOF  -> "EOF" 
  | OPEQ _ -> "OPEQ" 
  | STRING _ -> "STRING" 
  | ID _ -> "ID" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | AT  -> (null : System.Object) 
  | PIPE  -> (null : System.Object) 
  | HASH  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | EQEQ  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GEQ  -> (null : System.Object) 
  | LEQ  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | MODULO  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | LCURLY  -> (null : System.Object) 
  | RCURLY  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | OPEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;33us;65535us;0us;32us;4us;5us;33us;33us;34us;8us;35us;7us;36us;9us;37us;10us;38us;11us;39us;12us;40us;13us;41us;14us;42us;15us;43us;16us;44us;17us;45us;18us;46us;19us;47us;20us;48us;21us;49us;22us;50us;23us;51us;24us;53us;25us;68us;26us;69us;27us;73us;28us;74us;29us;76us;29us;81us;30us;83us;31us;87us;31us;90us;32us;94us;32us;96us;33us;60us;65535us;0us;53us;4us;53us;5us;34us;7us;34us;8us;34us;9us;34us;10us;34us;11us;34us;12us;34us;13us;34us;14us;34us;15us;34us;16us;34us;17us;34us;18us;34us;19us;34us;20us;34us;21us;34us;22us;34us;23us;34us;24us;34us;25us;34us;26us;34us;27us;34us;28us;34us;29us;34us;30us;34us;31us;34us;32us;34us;33us;35us;34us;53us;35us;53us;36us;53us;37us;53us;38us;53us;39us;53us;40us;53us;41us;53us;42us;53us;43us;53us;44us;53us;45us;53us;46us;53us;47us;53us;48us;53us;49us;53us;50us;53us;51us;53us;53us;53us;68us;53us;69us;53us;73us;53us;74us;53us;76us;53us;81us;53us;83us;53us;87us;53us;90us;53us;94us;53us;96us;53us;33us;65535us;0us;55us;4us;55us;33us;55us;34us;55us;35us;55us;36us;55us;37us;55us;38us;55us;39us;55us;40us;55us;41us;55us;42us;55us;43us;55us;44us;55us;45us;55us;46us;55us;47us;55us;48us;55us;49us;55us;50us;55us;51us;55us;53us;55us;68us;55us;69us;55us;73us;55us;74us;55us;76us;55us;81us;55us;83us;55us;87us;55us;90us;55us;94us;55us;96us;55us;1us;65535us;69us;70us;33us;65535us;0us;54us;4us;54us;33us;54us;34us;54us;35us;54us;36us;54us;37us;54us;38us;54us;39us;54us;40us;54us;41us;54us;42us;54us;43us;54us;44us;54us;45us;54us;46us;54us;47us;54us;48us;54us;49us;54us;50us;54us;51us;54us;53us;54us;68us;54us;69us;54us;73us;54us;74us;54us;76us;54us;81us;54us;83us;54us;87us;54us;90us;54us;94us;54us;96us;54us;2us;65535us;74us;75us;76us;77us;33us;65535us;0us;57us;4us;57us;33us;57us;34us;57us;35us;57us;36us;57us;37us;57us;38us;57us;39us;57us;40us;57us;41us;57us;42us;57us;43us;57us;44us;57us;45us;57us;46us;57us;47us;57us;48us;57us;49us;57us;50us;57us;51us;57us;53us;57us;68us;57us;69us;57us;73us;57us;74us;57us;76us;57us;81us;58us;83us;57us;87us;57us;90us;57us;94us;57us;96us;57us;33us;65535us;0us;80us;4us;80us;33us;80us;34us;80us;35us;80us;36us;80us;37us;80us;38us;80us;39us;80us;40us;80us;41us;80us;42us;80us;43us;80us;44us;80us;45us;80us;46us;80us;47us;80us;48us;80us;49us;80us;50us;80us;51us;80us;53us;80us;68us;80us;69us;80us;73us;80us;74us;80us;76us;80us;81us;79us;83us;80us;87us;80us;90us;80us;94us;80us;96us;80us;33us;65535us;0us;56us;4us;56us;33us;56us;34us;56us;35us;56us;36us;56us;37us;56us;38us;56us;39us;56us;40us;56us;41us;56us;42us;56us;43us;56us;44us;56us;45us;56us;46us;56us;47us;56us;48us;56us;49us;56us;50us;56us;51us;56us;53us;56us;68us;56us;69us;56us;73us;56us;74us;56us;76us;56us;81us;56us;83us;56us;87us;56us;90us;56us;94us;56us;96us;56us;2us;65535us;83us;85us;87us;88us;60us;65535us;0us;82us;4us;82us;5us;59us;7us;59us;8us;59us;9us;59us;10us;59us;11us;59us;12us;59us;13us;59us;14us;59us;15us;59us;16us;59us;17us;59us;18us;59us;19us;59us;20us;59us;21us;59us;22us;59us;23us;59us;24us;59us;25us;59us;26us;59us;27us;59us;28us;59us;29us;59us;30us;59us;31us;59us;32us;59us;33us;60us;34us;82us;35us;82us;36us;82us;37us;82us;38us;82us;39us;82us;40us;82us;41us;82us;42us;82us;43us;82us;44us;82us;45us;82us;46us;82us;47us;82us;48us;82us;49us;82us;50us;82us;51us;52us;53us;82us;68us;82us;69us;82us;73us;82us;74us;82us;76us;82us;81us;82us;83us;82us;87us;82us;90us;82us;94us;82us;96us;82us;60us;65535us;0us;89us;4us;89us;5us;89us;7us;89us;8us;89us;9us;89us;10us;89us;11us;89us;12us;89us;13us;89us;14us;89us;15us;89us;16us;89us;17us;89us;18us;89us;19us;89us;20us;89us;21us;89us;22us;89us;23us;89us;24us;89us;25us;89us;26us;89us;27us;89us;28us;89us;29us;89us;30us;89us;31us;89us;32us;89us;33us;89us;34us;89us;35us;89us;36us;89us;37us;89us;38us;89us;39us;89us;40us;89us;41us;89us;42us;89us;43us;89us;44us;89us;45us;89us;46us;89us;47us;89us;48us;89us;49us;89us;50us;89us;51us;89us;53us;89us;68us;89us;69us;71us;73us;89us;74us;78us;76us;78us;81us;89us;83us;89us;87us;89us;90us;89us;94us;89us;96us;89us;3us;65535us;0us;2us;90us;92us;94us;95us;33us;65535us;0us;63us;4us;63us;33us;63us;34us;63us;35us;63us;36us;63us;37us;63us;38us;63us;39us;63us;40us;63us;41us;63us;42us;63us;43us;63us;44us;63us;45us;63us;46us;63us;47us;63us;48us;63us;49us;63us;50us;63us;51us;63us;53us;63us;68us;63us;69us;63us;73us;63us;74us;63us;76us;63us;81us;63us;83us;63us;87us;63us;90us;63us;94us;63us;96us;63us;2us;65535us;33us;98us;96us;97us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;37us;98us;132us;134us;168us;171us;205us;239us;273us;276us;337us;398us;402us;436us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;2us;1us;2us;1us;2us;1us;3us;21us;3us;4us;5us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;27us;44us;1us;3us;22us;4us;4us;5us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;22us;27us;44us;21us;4us;4us;5us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;27us;44us;21us;4us;5us;5us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;27us;44us;21us;4us;5us;6us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;27us;44us;21us;4us;5us;6us;7us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;27us;44us;21us;4us;5us;6us;7us;8us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;27us;44us;21us;4us;5us;6us;7us;8us;9us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;27us;44us;21us;4us;5us;6us;7us;8us;9us;10us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;27us;44us;21us;4us;5us;6us;7us;8us;9us;10us;11us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;27us;44us;21us;4us;5us;6us;7us;8us;9us;10us;11us;12us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;27us;44us;21us;4us;5us;6us;7us;8us;9us;10us;11us;12us;13us;13us;14us;15us;16us;17us;18us;19us;20us;21us;27us;44us;21us;4us;5us;6us;7us;8us;9us;10us;11us;12us;13us;14us;14us;15us;16us;17us;18us;19us;20us;21us;27us;44us;21us;4us;5us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;15us;16us;17us;18us;19us;20us;21us;27us;44us;21us;4us;5us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;16us;17us;18us;19us;20us;21us;27us;44us;21us;4us;5us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;17us;18us;19us;20us;21us;27us;44us;21us;4us;5us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;18us;19us;20us;21us;27us;44us;21us;4us;5us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;19us;20us;21us;27us;44us;21us;4us;5us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;20us;21us;27us;44us;21us;4us;5us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;22us;27us;44us;21us;4us;5us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;27us;35us;44us;21us;4us;5us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;27us;36us;44us;22us;4us;5us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;27us;38us;39us;44us;21us;4us;5us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;27us;40us;44us;20us;4us;5us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;27us;44us;22us;4us;5us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;27us;44us;48us;49us;23us;4us;5us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;27us;44us;53us;54us;55us;22us;4us;5us;6us;7us;8us;9us;10us;11us;12us;13us;14us;15us;16us;17us;18us;19us;20us;21us;27us;44us;57us;58us;1us;4us;3us;4us;22us;30us;1us;5us;1us;6us;1us;7us;1us;8us;1us;9us;1us;10us;1us;11us;1us;12us;1us;13us;1us;14us;1us;15us;1us;16us;1us;17us;1us;18us;1us;19us;2us;20us;21us;2us;21us;45us;2us;22us;30us;1us;23us;1us;24us;1us;25us;1us;26us;2us;26us;43us;1us;27us;2us;27us;45us;1us;28us;1us;29us;1us;31us;2us;32us;56us;1us;33us;1us;34us;1us;35us;1us;35us;1us;35us;1us;35us;2us;37us;50us;2us;38us;39us;2us;38us;39us;2us;38us;39us;2us;38us;39us;1us;38us;1us;38us;2us;41us;50us;3us;42us;42us;43us;2us;42us;43us;2us;42us;43us;1us;45us;2us;46us;47us;1us;46us;1us;47us;1us;47us;1us;49us;1us;49us;1us;50us;2us;51us;52us;1us;51us;1us;52us;1us;52us;2us;54us;55us;1us;55us;1us;56us;1us;56us;1us;58us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;7us;9us;11us;33us;35us;58us;80us;102us;124us;146us;168us;190us;212us;234us;256us;278us;300us;322us;344us;366us;388us;410us;432us;454us;476us;498us;521us;543us;564us;587us;611us;634us;636us;640us;642us;644us;646us;648us;650us;652us;654us;656us;658us;660us;662us;664us;666us;668us;670us;673us;676us;679us;681us;683us;685us;687us;690us;692us;695us;697us;699us;701us;704us;706us;708us;710us;712us;714us;716us;719us;722us;725us;728us;731us;733us;735us;738us;742us;745us;748us;750us;753us;755us;757us;759us;761us;763us;765us;768us;770us;772us;774us;777us;779us;781us;783us;|]
let _fsyacc_action_rows = 99
let _fsyacc_actionTableElements = [|10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;0us;49152us;1us;16385us;25us;3us;0us;16386us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;20us;16428us;0us;36us;1us;37us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;8us;42us;9us;41us;10us;43us;11us;44us;12us;45us;13us;46us;14us;47us;15us;48us;16us;66us;17us;40us;19us;6us;22us;90us;31us;50us;0us;16387us;19us;16388us;0us;36us;1us;37us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;8us;42us;9us;41us;10us;43us;11us;44us;12us;45us;13us;46us;14us;47us;15us;48us;16us;66us;17us;40us;22us;90us;31us;50us;19us;16388us;0us;36us;1us;37us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;8us;42us;9us;41us;10us;43us;11us;44us;12us;45us;13us;46us;14us;47us;15us;48us;16us;66us;17us;40us;22us;90us;31us;50us;9us;16389us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;16us;66us;17us;40us;22us;90us;31us;50us;9us;16390us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;16us;66us;17us;40us;22us;90us;31us;50us;6us;16391us;4us;49us;6us;65us;7us;51us;16us;66us;22us;90us;31us;50us;6us;16392us;4us;49us;6us;65us;7us;51us;16us;66us;22us;90us;31us;50us;6us;16393us;4us;49us;6us;65us;7us;51us;16us;66us;22us;90us;31us;50us;11us;16394us;0us;36us;1us;37us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;16us;66us;17us;40us;22us;90us;31us;50us;11us;16395us;0us;36us;1us;37us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;16us;66us;17us;40us;22us;90us;31us;50us;11us;16396us;0us;36us;1us;37us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;16us;66us;17us;40us;22us;90us;31us;50us;11us;16397us;0us;36us;1us;37us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;16us;66us;17us;40us;22us;90us;31us;50us;11us;16398us;0us;36us;1us;37us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;16us;66us;17us;40us;22us;90us;31us;50us;11us;16399us;0us;36us;1us;37us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;16us;66us;17us;40us;22us;90us;31us;50us;17us;16400us;0us;36us;1us;37us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;8us;42us;9us;41us;10us;43us;11us;44us;12us;45us;13us;46us;16us;66us;17us;40us;22us;90us;31us;50us;17us;16401us;0us;36us;1us;37us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;8us;42us;9us;41us;10us;43us;11us;44us;12us;45us;13us;46us;16us;66us;17us;40us;22us;90us;31us;50us;4us;16402us;6us;65us;7us;51us;22us;90us;31us;50us;19us;16403us;0us;36us;1us;37us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;8us;42us;9us;41us;10us;43us;11us;44us;12us;45us;13us;46us;14us;47us;15us;48us;16us;66us;17us;40us;22us;90us;31us;50us;19us;16404us;0us;36us;1us;37us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;8us;42us;9us;41us;10us;43us;11us;44us;12us;45us;13us;46us;14us;47us;15us;48us;16us;66us;17us;40us;22us;90us;31us;50us;19us;16406us;0us;36us;1us;37us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;8us;42us;9us;41us;10us;43us;11us;44us;12us;45us;13us;46us;14us;47us;15us;48us;16us;66us;17us;40us;22us;90us;31us;50us;20us;16428us;0us;36us;1us;37us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;8us;42us;9us;41us;10us;43us;11us;44us;12us;45us;13us;46us;14us;47us;15us;48us;16us;66us;17us;40us;19us;69us;22us;90us;31us;50us;19us;16420us;0us;36us;1us;37us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;8us;42us;9us;41us;10us;43us;11us;44us;12us;45us;13us;46us;14us;47us;15us;48us;16us;66us;17us;40us;22us;90us;31us;50us;20us;16428us;0us;36us;1us;37us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;8us;42us;9us;41us;10us;43us;11us;44us;12us;45us;13us;46us;14us;47us;15us;48us;16us;66us;17us;40us;19us;74us;22us;90us;31us;50us;19us;16424us;0us;36us;1us;37us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;8us;42us;9us;41us;10us;43us;11us;44us;12us;45us;13us;46us;14us;47us;15us;48us;16us;66us;17us;40us;22us;90us;31us;50us;19us;16428us;0us;36us;1us;37us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;8us;42us;9us;41us;10us;43us;11us;44us;12us;45us;13us;46us;14us;47us;15us;48us;16us;66us;17us;40us;22us;90us;31us;50us;21us;16428us;0us;36us;1us;37us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;8us;42us;9us;41us;10us;43us;11us;44us;12us;45us;13us;46us;14us;47us;15us;48us;16us;66us;17us;40us;21us;16432us;22us;90us;24us;87us;31us;50us;22us;16428us;0us;36us;1us;37us;2us;38us;3us;39us;4us;49us;6us;65us;7us;51us;8us;42us;9us;41us;10us;43us;11us;44us;12us;45us;13us;46us;14us;47us;15us;48us;16us;66us;17us;40us;22us;90us;23us;16437us;25us;94us;31us;50us;37us;16437us;31us;16441us;0us;36us;1us;37us;2us;38us;3us;39us;4us;49us;5us;16428us;6us;65us;7us;51us;8us;42us;9us;41us;10us;43us;11us;44us;12us;45us;13us;46us;14us;47us;15us;48us;16us;66us;17us;40us;18us;4us;20us;83us;22us;90us;26us;16428us;27us;72us;29us;67us;30us;16428us;31us;50us;32us;62us;33us;64us;34us;61us;35us;16428us;36us;16428us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;10us;16414us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;0us;16405us;10us;16414us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;0us;16407us;0us;16408us;0us;16409us;0us;16410us;0us;16410us;0us;16411us;0us;16411us;0us;16412us;0us;16413us;0us;16415us;1us;16416us;26us;96us;0us;16417us;0us;16418us;1us;32768us;18us;68us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;0us;16419us;0us;16421us;1us;32768us;18us;73us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;1us;16423us;28us;76us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;0us;16422us;0us;16425us;1us;16426us;5us;81us;1us;32768us;5us;81us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;0us;16429us;11us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;21us;84us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;0us;16430us;1us;32768us;21us;86us;0us;16431us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;0us;16433us;0us;16434us;11us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;23us;91us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;0us;16435us;1us;32768us;23us;93us;0us;16436us;10us;16438us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;0us;16439us;10us;32768us;6us;65us;16us;66us;18us;4us;20us;83us;22us;90us;27us;72us;29us;67us;32us;62us;33us;64us;34us;61us;0us;16440us;0us;16442us;|]
let _fsyacc_actionTableRowOffsets = [|0us;11us;12us;14us;15us;26us;47us;48us;68us;88us;98us;108us;115us;122us;129us;141us;153us;165us;177us;189us;201us;219us;237us;242us;262us;282us;302us;323us;343us;364us;384us;404us;426us;449us;481us;492us;503us;514us;525us;536us;547us;558us;569us;580us;591us;602us;613us;624us;635us;646us;657us;668us;679us;680us;691us;692us;693us;694us;695us;696us;697us;698us;699us;700us;701us;703us;704us;705us;707us;718us;729us;730us;731us;733us;744us;755us;757us;768us;769us;770us;772us;774us;785us;786us;798us;799us;801us;802us;813us;814us;815us;827us;828us;830us;831us;842us;843us;854us;855us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;2us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;2us;1us;1us;1us;1us;2us;1us;1us;1us;1us;1us;1us;1us;5us;1us;1us;7us;5us;1us;1us;3us;3us;1us;1us;2us;3us;1us;3us;1us;2us;3us;1us;2us;3us;3us;1us;2us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;1us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;3us;3us;4us;5us;5us;6us;6us;7us;7us;8us;8us;9us;9us;10us;10us;11us;11us;12us;13us;13us;14us;14us;14us;15us;16us;16us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16386us;65535us;65535us;16387us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16407us;16408us;16409us;16410us;65535us;16411us;65535us;16412us;16413us;16415us;65535us;16417us;16418us;65535us;65535us;65535us;16419us;65535us;65535us;65535us;65535us;65535us;65535us;16422us;65535us;65535us;65535us;65535us;16429us;65535us;16430us;65535us;16431us;65535us;16433us;16434us;65535us;16435us;65535us;16436us;65535us;16439us;65535us;16440us;16442us;|]
let _fsyacc_reductions = lazy [|
# 344 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> NS2.Ast.AST in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startmain));
# 353 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_body_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsy"
                                                Root _1 
                   )
# 31 "Parser.fsy"
                 : NS2.Ast.AST));
# 364 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_body_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                                Root _1 
                   )
# 32 "Parser.fsy"
                 : NS2.Ast.AST));
# 375 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                                    _2 
                   )
# 35 "Parser.fsy"
                 : 'gentype_expr));
# 386 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _2 = parseState.GetInput(2) :?> 'gentype_op in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                                Binop (_1, _2, _3) 
                   )
# 36 "Parser.fsy"
                 : 'gentype_expr));
# 399 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                              Binop (_1, "+", _3) 
                   )
# 37 "Parser.fsy"
                 : 'gentype_expr));
# 411 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                              Binop (_1, "-", _3) 
                   )
# 38 "Parser.fsy"
                 : 'gentype_expr));
# 423 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                              Binop (_1, "*", _3) 
                   )
# 39 "Parser.fsy"
                 : 'gentype_expr));
# 435 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                                Binop (_1, "/", _3) 
                   )
# 40 "Parser.fsy"
                 : 'gentype_expr));
# 447 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                                            Binop(_1, "%", _3) 
                   )
# 41 "Parser.fsy"
                 : 'gentype_expr));
# 459 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                                               Binop(_1, "==", _3) 
                   )
# 43 "Parser.fsy"
                 : 'gentype_expr));
# 471 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                                               Binop(_1, "!=", _3) 
                   )
# 44 "Parser.fsy"
                 : 'gentype_expr));
# 483 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                                               Binop(_1, ">",  _3) 
                   )
# 45 "Parser.fsy"
                 : 'gentype_expr));
# 495 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                               Binop(_1, "<",  _3) 
                   )
# 46 "Parser.fsy"
                 : 'gentype_expr));
# 507 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                               Binop(_1, ">=", _3) 
                   )
# 47 "Parser.fsy"
                 : 'gentype_expr));
# 519 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                               Binop(_1, "<=", _3) 
                   )
# 48 "Parser.fsy"
                 : 'gentype_expr));
# 531 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                               Binop(_1, "&&", _3) 
                   )
# 50 "Parser.fsy"
                 : 'gentype_expr));
# 543 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                               Binop(_1, "||", _3) 
                   )
# 51 "Parser.fsy"
                 : 'gentype_expr));
# 555 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                             Index (_1, _3) 
                   )
# 53 "Parser.fsy"
                 : 'gentype_expr));
# 567 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                            Assign (_1, Binop(_1, _2[.._2.Length-2], _3))
                   )
# 54 "Parser.fsy"
                 : 'gentype_expr));
# 580 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                            Assign (_1, _3)
                   )
# 55 "Parser.fsy"
                 : 'gentype_expr));
# 592 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_funcblock in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                            Assign (_1, _3)
                   )
# 56 "Parser.fsy"
                 : 'gentype_expr));
# 604 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_op in
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                            Unaryop (_1, _2)
                   )
# 57 "Parser.fsy"
                 : 'gentype_expr));
# 616 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_if_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                            _1 
                   )
# 58 "Parser.fsy"
                 : 'gentype_expr));
# 627 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_while_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                            _1 
                   )
# 59 "Parser.fsy"
                 : 'gentype_expr));
# 638 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_arr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                      _1 
                   )
# 60 "Parser.fsy"
                 : 'gentype_expr));
# 649 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pipe_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                          Pipe _1 
                   )
# 61 "Parser.fsy"
                 : 'gentype_expr));
# 660 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _2 = parseState.GetInput(2) :?> 'gentype_funcblock in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                              Map (_1, _2) 
                   )
# 62 "Parser.fsy"
                 : 'gentype_expr));
# 672 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                     Int _1 
                   )
# 63 "Parser.fsy"
                 : 'gentype_expr));
# 683 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                       String _1 
                   )
# 64 "Parser.fsy"
                 : 'gentype_expr));
# 694 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_op in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                    Id _1 
                   )
# 65 "Parser.fsy"
                 : 'gentype_expr));
# 705 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_call in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                         _1 
                   )
# 66 "Parser.fsy"
                 : 'gentype_expr));
# 716 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                    Id _1 
                   )
# 67 "Parser.fsy"
                 : 'gentype_expr));
# 727 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                       "#"  
                   )
# 70 "Parser.fsy"
                 : 'gentype_op));
# 737 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                       "!"  
                   )
# 71 "Parser.fsy"
                 : 'gentype_op));
# 747 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_while_body in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                               While (_3,_5) 
                   )
# 74 "Parser.fsy"
                 : 'gentype_while_expr));
# 759 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                                              _1
                   )
# 77 "Parser.fsy"
                 : 'gentype_while_body));
# 770 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                              _1
                   )
# 78 "Parser.fsy"
                 : 'gentype_while_body));
# 781 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_if_body in
            let _7 = parseState.GetInput(7) :?> 'gentype_if_body in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                                             If(_3,_5,Some _7)
                   )
# 81 "Parser.fsy"
                 : 'gentype_if_expr));
# 794 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_if_body in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                                                             If(_3,_5, None)
                   )
# 82 "Parser.fsy"
                 : 'gentype_if_expr));
# 806 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                              _1
                   )
# 85 "Parser.fsy"
                 : 'gentype_if_body));
# 817 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                              _1
                   )
# 86 "Parser.fsy"
                 : 'gentype_if_body));
# 828 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pipe_entry in
            let _3 = parseState.GetInput(3) :?> 'gentype_pipe_entry in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                                                     [_1;_3] 
                   )
# 89 "Parser.fsy"
                 : 'gentype_pipe_expr));
# 840 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pipe_entry in
            let _3 = parseState.GetInput(3) :?> 'gentype_pipe_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                                                     _1::_3 
                   )
# 90 "Parser.fsy"
                 : 'gentype_pipe_expr));
# 852 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                              _1
                   )
# 93 "Parser.fsy"
                 : 'gentype_pipe_entry));
# 863 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_funcblock in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                                              _1
                   )
# 94 "Parser.fsy"
                 : 'gentype_pipe_entry));
# 874 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                             Array [] 
                   )
# 97 "Parser.fsy"
                 : 'gentype_arr));
# 884 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_element_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                                      Array _2 
                   )
# 98 "Parser.fsy"
                 : 'gentype_arr));
# 895 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                      [_1] 
                   )
# 101 "Parser.fsy"
                 : 'gentype_element_list));
# 906 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_element_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                                     _1 :: _3 
                   )
# 102 "Parser.fsy"
                 : 'gentype_element_list));
# 918 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                                               Func _1 
                   )
# 105 "Parser.fsy"
                 : 'gentype_funcblock));
# 929 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                             Block [] 
                   )
# 108 "Parser.fsy"
                 : 'gentype_block));
# 939 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_body_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                                    Block _2 
                   )
# 109 "Parser.fsy"
                 : 'gentype_block));
# 950 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                      [_1] 
                   )
# 112 "Parser.fsy"
                 : 'gentype_body_list));
# 961 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                             [_1] 
                   )
# 113 "Parser.fsy"
                 : 'gentype_body_list));
# 972 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_body_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                                      _1 :: _3 
                   )
# 114 "Parser.fsy"
                 : 'gentype_body_list));
# 984 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_arg_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                                                     Call (_1, _3)
                   )
# 117 "Parser.fsy"
                 : 'gentype_call));
# 996 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                      [_1] 
                   )
# 120 "Parser.fsy"
                 : 'gentype_arg_list));
# 1007 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _2 = parseState.GetInput(2) :?> 'gentype_arg_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                   _1 :: _2 
                   )
# 121 "Parser.fsy"
                 : 'gentype_arg_list));
|]
# 1020 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 38;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let main lexer lexbuf : NS2.Ast.AST =
    engine lexer lexbuf 0 :?> _
