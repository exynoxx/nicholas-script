// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open System
open NS2.Ast

# 11 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | AT
  | POW
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LCURLY
  | RCURLY
  | EQ
  | COMMA
  | SEMICOLON
  | EOF
  | OPEQ of (string)
  | OP of (string)
  | STRING of (string)
  | ID of (string)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_AT
    | TOKEN_POW
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_EQ
    | TOKEN_COMMA
    | TOKEN_SEMICOLON
    | TOKEN_EOF
    | TOKEN_OPEQ
    | TOKEN_OP
    | TOKEN_STRING
    | TOKEN_ID
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startmain
    | NONTERM_main
    | NONTERM_expr
    | NONTERM_arr
    | NONTERM_element_list
    | NONTERM_func
    | NONTERM_body_list
    | NONTERM_call
    | NONTERM_arg_list

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | PLUS  -> 0 
  | MINUS  -> 1 
  | TIMES  -> 2 
  | DIVIDE  -> 3 
  | AT  -> 4 
  | POW  -> 5 
  | LPAREN  -> 6 
  | RPAREN  -> 7 
  | LBRACK  -> 8 
  | RBRACK  -> 9 
  | LCURLY  -> 10 
  | RCURLY  -> 11 
  | EQ  -> 12 
  | COMMA  -> 13 
  | SEMICOLON  -> 14 
  | EOF  -> 15 
  | OPEQ _ -> 16 
  | OP _ -> 17 
  | STRING _ -> 18 
  | ID _ -> 19 
  | INT _ -> 20 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_PLUS 
  | 1 -> TOKEN_MINUS 
  | 2 -> TOKEN_TIMES 
  | 3 -> TOKEN_DIVIDE 
  | 4 -> TOKEN_AT 
  | 5 -> TOKEN_POW 
  | 6 -> TOKEN_LPAREN 
  | 7 -> TOKEN_RPAREN 
  | 8 -> TOKEN_LBRACK 
  | 9 -> TOKEN_RBRACK 
  | 10 -> TOKEN_LCURLY 
  | 11 -> TOKEN_RCURLY 
  | 12 -> TOKEN_EQ 
  | 13 -> TOKEN_COMMA 
  | 14 -> TOKEN_SEMICOLON 
  | 15 -> TOKEN_EOF 
  | 16 -> TOKEN_OPEQ 
  | 17 -> TOKEN_OP 
  | 18 -> TOKEN_STRING 
  | 19 -> TOKEN_ID 
  | 20 -> TOKEN_INT 
  | 23 -> TOKEN_end_of_input
  | 21 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startmain 
    | 1 -> NONTERM_main 
    | 2 -> NONTERM_expr 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_expr 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_expr 
    | 8 -> NONTERM_expr 
    | 9 -> NONTERM_expr 
    | 10 -> NONTERM_expr 
    | 11 -> NONTERM_expr 
    | 12 -> NONTERM_expr 
    | 13 -> NONTERM_expr 
    | 14 -> NONTERM_expr 
    | 15 -> NONTERM_expr 
    | 16 -> NONTERM_expr 
    | 17 -> NONTERM_expr 
    | 18 -> NONTERM_expr 
    | 19 -> NONTERM_arr 
    | 20 -> NONTERM_arr 
    | 21 -> NONTERM_element_list 
    | 22 -> NONTERM_element_list 
    | 23 -> NONTERM_func 
    | 24 -> NONTERM_func 
    | 25 -> NONTERM_body_list 
    | 26 -> NONTERM_body_list 
    | 27 -> NONTERM_body_list 
    | 28 -> NONTERM_call 
    | 29 -> NONTERM_arg_list 
    | 30 -> NONTERM_arg_list 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 23 
let _fsyacc_tagOfErrorTerminal = 21

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIVIDE  -> "DIVIDE" 
  | AT  -> "AT" 
  | POW  -> "POW" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | LCURLY  -> "LCURLY" 
  | RCURLY  -> "RCURLY" 
  | EQ  -> "EQ" 
  | COMMA  -> "COMMA" 
  | SEMICOLON  -> "SEMICOLON" 
  | EOF  -> "EOF" 
  | OPEQ _ -> "OPEQ" 
  | OP _ -> "OP" 
  | STRING _ -> "STRING" 
  | ID _ -> "ID" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | AT  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | LCURLY  -> (null : System.Object) 
  | RCURLY  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | OPEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;17us;65535us;0us;16us;3us;4us;17us;17us;18us;6us;19us;7us;20us;8us;21us;9us;22us;10us;23us;11us;24us;12us;25us;13us;26us;14us;34us;17us;35us;15us;39us;15us;41us;16us;45us;16us;17us;65535us;0us;27us;3us;27us;17us;27us;18us;27us;19us;27us;20us;27us;21us;27us;22us;27us;23us;27us;24us;27us;25us;27us;26us;27us;34us;27us;35us;27us;39us;27us;41us;27us;45us;27us;2us;65535us;35us;37us;39us;40us;29us;65535us;0us;28us;3us;28us;4us;30us;6us;30us;7us;30us;8us;30us;9us;30us;10us;30us;11us;30us;12us;30us;13us;30us;14us;30us;15us;30us;16us;30us;17us;29us;18us;28us;19us;28us;20us;28us;21us;28us;22us;28us;23us;28us;24us;28us;25us;28us;26us;28us;34us;28us;35us;28us;39us;28us;41us;28us;45us;28us;3us;65535us;0us;2us;41us;43us;45us;46us;17us;65535us;0us;33us;3us;33us;17us;33us;18us;33us;19us;33us;20us;33us;21us;33us;22us;33us;23us;33us;24us;33us;25us;33us;26us;33us;34us;33us;35us;33us;39us;33us;41us;33us;45us;33us;2us;65535us;17us;48us;34us;47us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;21us;39us;42us;72us;76us;94us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;2us;10us;2us;3us;4us;5us;6us;7us;8us;9us;10us;14us;1us;2us;10us;3us;3us;4us;5us;6us;7us;8us;9us;10us;14us;10us;3us;4us;4us;5us;6us;7us;8us;9us;10us;14us;10us;3us;4us;5us;5us;6us;7us;8us;9us;10us;14us;10us;3us;4us;5us;6us;6us;7us;8us;9us;10us;14us;10us;3us;4us;5us;6us;7us;7us;8us;9us;10us;14us;10us;3us;4us;5us;6us;7us;8us;8us;9us;10us;14us;10us;3us;4us;5us;6us;7us;8us;9us;9us;10us;14us;10us;3us;4us;5us;6us;7us;8us;9us;10us;10us;14us;10us;3us;4us;5us;6us;7us;8us;9us;10us;11us;14us;11us;3us;4us;5us;6us;7us;8us;9us;10us;14us;21us;22us;12us;3us;4us;5us;6us;7us;8us;9us;10us;14us;25us;26us;27us;11us;3us;4us;5us;6us;7us;8us;9us;10us;14us;29us;30us;1us;3us;1us;4us;1us;5us;1us;6us;1us;7us;1us;8us;1us;9us;1us;10us;1us;11us;1us;12us;1us;13us;2us;13us;14us;1us;14us;1us;15us;1us;16us;1us;17us;2us;18us;28us;2us;19us;20us;1us;19us;1us;20us;1us;20us;1us;22us;1us;22us;2us;23us;24us;1us;23us;1us;24us;1us;24us;2us;26us;27us;1us;27us;1us;28us;1us;30us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;19us;21us;32us;43us;54us;65us;76us;87us;98us;109us;120us;132us;145us;157us;159us;161us;163us;165us;167us;169us;171us;173us;175us;177us;179us;182us;184us;186us;188us;190us;193us;196us;198us;200us;202us;204us;206us;209us;211us;213us;215us;218us;220us;222us;|]
let _fsyacc_action_rows = 49
let _fsyacc_actionTableElements = [|7us;32768us;6us;3us;8us;35us;10us;41us;17us;26us;18us;32us;19us;34us;20us;31us;0us;49152us;0us;16385us;7us;32768us;6us;3us;8us;35us;10us;41us;17us;26us;18us;32us;19us;34us;20us;31us;10us;32768us;0us;18us;1us;19us;2us;20us;3us;22us;4us;23us;5us;21us;7us;5us;10us;41us;12us;25us;16us;24us;0us;16386us;7us;16387us;2us;20us;3us;22us;4us;23us;5us;21us;10us;41us;12us;25us;16us;24us;7us;16388us;2us;20us;3us;22us;4us;23us;5us;21us;10us;41us;12us;25us;16us;24us;5us;16389us;4us;23us;5us;21us;10us;41us;12us;25us;16us;24us;4us;16390us;4us;23us;10us;41us;12us;25us;16us;24us;5us;16391us;4us;23us;5us;21us;10us;41us;12us;25us;16us;24us;3us;16392us;10us;41us;12us;25us;16us;24us;9us;16393us;0us;18us;1us;19us;2us;20us;3us;22us;4us;23us;5us;21us;10us;41us;12us;25us;16us;24us;9us;16394us;0us;18us;1us;19us;2us;20us;3us;22us;4us;23us;5us;21us;10us;41us;12us;25us;16us;24us;9us;16395us;0us;18us;1us;19us;2us;20us;3us;22us;4us;23us;5us;21us;10us;41us;12us;25us;16us;24us;10us;16405us;0us;18us;1us;19us;2us;20us;3us;22us;4us;23us;5us;21us;10us;41us;12us;25us;13us;39us;16us;24us;10us;16409us;0us;18us;1us;19us;2us;20us;3us;22us;4us;23us;5us;21us;10us;41us;12us;25us;14us;45us;16us;24us;15us;16413us;0us;18us;1us;19us;2us;20us;3us;22us;4us;23us;5us;21us;6us;3us;8us;35us;10us;41us;12us;25us;16us;24us;17us;26us;18us;32us;19us;34us;20us;31us;7us;32768us;6us;3us;8us;35us;10us;41us;17us;26us;18us;32us;19us;34us;20us;31us;7us;32768us;6us;3us;8us;35us;10us;41us;17us;26us;18us;32us;19us;34us;20us;31us;7us;32768us;6us;3us;8us;35us;10us;41us;17us;26us;18us;32us;19us;34us;20us;31us;7us;32768us;6us;3us;8us;35us;10us;41us;17us;26us;18us;32us;19us;34us;20us;31us;7us;32768us;6us;3us;8us;35us;10us;41us;17us;26us;18us;32us;19us;34us;20us;31us;7us;32768us;6us;3us;8us;35us;10us;41us;17us;26us;18us;32us;19us;34us;20us;31us;7us;32768us;6us;3us;8us;35us;10us;41us;17us;26us;18us;32us;19us;34us;20us;31us;7us;32768us;6us;3us;8us;35us;10us;41us;17us;26us;18us;32us;19us;34us;20us;31us;7us;32768us;6us;3us;8us;35us;10us;41us;17us;26us;18us;32us;19us;34us;20us;31us;0us;16396us;0us;16397us;0us;16397us;0us;16398us;0us;16399us;0us;16400us;0us;16401us;7us;16402us;6us;3us;8us;35us;10us;41us;17us;26us;18us;32us;19us;34us;20us;31us;8us;32768us;6us;3us;8us;35us;9us;36us;10us;41us;17us;26us;18us;32us;19us;34us;20us;31us;0us;16403us;1us;32768us;9us;38us;0us;16404us;7us;32768us;6us;3us;8us;35us;10us;41us;17us;26us;18us;32us;19us;34us;20us;31us;0us;16406us;8us;32768us;6us;3us;8us;35us;10us;41us;11us;42us;17us;26us;18us;32us;19us;34us;20us;31us;0us;16407us;1us;32768us;11us;44us;0us;16408us;7us;16410us;6us;3us;8us;35us;10us;41us;17us;26us;18us;32us;19us;34us;20us;31us;0us;16411us;0us;16412us;0us;16414us;|]
let _fsyacc_actionTableRowOffsets = [|0us;8us;9us;10us;18us;29us;30us;38us;46us;52us;57us;63us;67us;77us;87us;97us;108us;119us;135us;143us;151us;159us;167us;175us;183us;191us;199us;207us;208us;209us;210us;211us;212us;213us;214us;222us;231us;232us;234us;235us;243us;244us;253us;254us;256us;257us;265us;266us;267us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;3us;3us;3us;3us;3us;3us;3us;3us;3us;2us;1us;1us;2us;1us;1us;1us;1us;2us;3us;1us;3us;2us;3us;1us;2us;3us;2us;1us;2us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;3us;3us;4us;4us;5us;5us;6us;6us;6us;7us;8us;8us;|]
let _fsyacc_immediateActions = [|65535us;49152us;16385us;65535us;65535us;16386us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16396us;16397us;65535us;16398us;16399us;16400us;16401us;65535us;65535us;16403us;65535us;16404us;65535us;16406us;65535us;16407us;65535us;16408us;65535us;16411us;16412us;16414us;|]
let _fsyacc_reductions = lazy [|
# 224 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> NS2.Ast.AST in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startmain));
# 233 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_body_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "Parser.fsy"
                                  Root _1 
                   )
# 29 "Parser.fsy"
                 : NS2.Ast.AST));
# 244 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                                    _2 
                   )
# 32 "Parser.fsy"
                 : 'gentype_expr));
# 255 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                              Binop (_1, "+", _3) 
                   )
# 33 "Parser.fsy"
                 : 'gentype_expr));
# 267 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                              Binop (_1, "-", _3) 
                   )
# 34 "Parser.fsy"
                 : 'gentype_expr));
# 279 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                              Binop (_1, "*", _3) 
                   )
# 35 "Parser.fsy"
                 : 'gentype_expr));
# 291 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                             Binop (_1, "**", _3) 
                   )
# 36 "Parser.fsy"
                 : 'gentype_expr));
# 303 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                                Binop (_1, "/", _3) 
                   )
# 37 "Parser.fsy"
                 : 'gentype_expr));
# 315 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                             Index (_1, _3) 
                   )
# 38 "Parser.fsy"
                 : 'gentype_expr));
# 327 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                                            Assign (_1, Binop(_1, _2[.._2.Length-2], _3))
                   )
# 39 "Parser.fsy"
                 : 'gentype_expr));
# 340 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                                            Assign (_1, _3)
                   )
# 40 "Parser.fsy"
                 : 'gentype_expr));
# 352 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                                            Unaryop (_1, _2)
                   )
# 41 "Parser.fsy"
                 : 'gentype_expr));
# 364 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_arr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                      _1 
                   )
# 42 "Parser.fsy"
                 : 'gentype_expr));
# 375 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_func in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                       _1 
                   )
# 43 "Parser.fsy"
                 : 'gentype_expr));
# 386 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _2 = parseState.GetInput(2) :?> 'gentype_func in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                          Map (_1, _2) 
                   )
# 44 "Parser.fsy"
                 : 'gentype_expr));
# 398 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                     Int _1 
                   )
# 45 "Parser.fsy"
                 : 'gentype_expr));
# 409 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                       String _1 
                   )
# 46 "Parser.fsy"
                 : 'gentype_expr));
# 420 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_call in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                         _1 
                   )
# 47 "Parser.fsy"
                 : 'gentype_expr));
# 431 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                    Id _1 
                   )
# 48 "Parser.fsy"
                 : 'gentype_expr));
# 442 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                             Array [] 
                   )
# 51 "Parser.fsy"
                 : 'gentype_arr));
# 452 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_element_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                      Array _2 
                   )
# 52 "Parser.fsy"
                 : 'gentype_arr));
# 463 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                      [_1] 
                   )
# 55 "Parser.fsy"
                 : 'gentype_element_list));
# 474 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_element_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                     _1 :: _3 
                   )
# 56 "Parser.fsy"
                 : 'gentype_element_list));
# 486 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                             Func [] 
                   )
# 59 "Parser.fsy"
                 : 'gentype_func));
# 496 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_body_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                    Func _2 
                   )
# 60 "Parser.fsy"
                 : 'gentype_func));
# 507 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                      [_1] 
                   )
# 63 "Parser.fsy"
                 : 'gentype_body_list));
# 518 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                             [_1] 
                   )
# 64 "Parser.fsy"
                 : 'gentype_body_list));
# 529 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_body_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                      _1 :: _3 
                   )
# 65 "Parser.fsy"
                 : 'gentype_body_list));
# 541 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_arg_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                                               Call (_1, _2)
                   )
# 68 "Parser.fsy"
                 : 'gentype_call));
# 553 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                      [_1] 
                   )
# 71 "Parser.fsy"
                 : 'gentype_arg_list));
# 564 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _2 = parseState.GetInput(2) :?> 'gentype_arg_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                                   _1 :: _2 
                   )
# 72 "Parser.fsy"
                 : 'gentype_arg_list));
|]
# 577 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 24;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let main lexer lexbuf : NS2.Ast.AST =
    engine lexer lexbuf 0 :?> _
