// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open System
open NS2.Ast

# 11 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | AT
  | PIPE
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LCURLY
  | RCURLY
  | EQ
  | COMMA
  | SEMICOLON
  | COLON
  | IF
  | ELSE
  | EOF
  | OPEQ of (string)
  | OP of (string)
  | STRING of (string)
  | ID of (string)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_AT
    | TOKEN_PIPE
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_LCURLY
    | TOKEN_RCURLY
    | TOKEN_EQ
    | TOKEN_COMMA
    | TOKEN_SEMICOLON
    | TOKEN_COLON
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_EOF
    | TOKEN_OPEQ
    | TOKEN_OP
    | TOKEN_STRING
    | TOKEN_ID
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startmain
    | NONTERM_main
    | NONTERM_expr
    | NONTERM_if_expr
    | NONTERM_if_body
    | NONTERM_pipe_expr
    | NONTERM_pipe_entry
    | NONTERM_arr
    | NONTERM_element_list
    | NONTERM_funcblock
    | NONTERM_block
    | NONTERM_body_list
    | NONTERM_call
    | NONTERM_arg_list

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | PLUS  -> 0 
  | MINUS  -> 1 
  | TIMES  -> 2 
  | DIVIDE  -> 3 
  | AT  -> 4 
  | PIPE  -> 5 
  | LPAREN  -> 6 
  | RPAREN  -> 7 
  | LBRACK  -> 8 
  | RBRACK  -> 9 
  | LCURLY  -> 10 
  | RCURLY  -> 11 
  | EQ  -> 12 
  | COMMA  -> 13 
  | SEMICOLON  -> 14 
  | COLON  -> 15 
  | IF  -> 16 
  | ELSE  -> 17 
  | EOF  -> 18 
  | OPEQ _ -> 19 
  | OP _ -> 20 
  | STRING _ -> 21 
  | ID _ -> 22 
  | INT _ -> 23 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_PLUS 
  | 1 -> TOKEN_MINUS 
  | 2 -> TOKEN_TIMES 
  | 3 -> TOKEN_DIVIDE 
  | 4 -> TOKEN_AT 
  | 5 -> TOKEN_PIPE 
  | 6 -> TOKEN_LPAREN 
  | 7 -> TOKEN_RPAREN 
  | 8 -> TOKEN_LBRACK 
  | 9 -> TOKEN_RBRACK 
  | 10 -> TOKEN_LCURLY 
  | 11 -> TOKEN_RCURLY 
  | 12 -> TOKEN_EQ 
  | 13 -> TOKEN_COMMA 
  | 14 -> TOKEN_SEMICOLON 
  | 15 -> TOKEN_COLON 
  | 16 -> TOKEN_IF 
  | 17 -> TOKEN_ELSE 
  | 18 -> TOKEN_EOF 
  | 19 -> TOKEN_OPEQ 
  | 20 -> TOKEN_OP 
  | 21 -> TOKEN_STRING 
  | 22 -> TOKEN_ID 
  | 23 -> TOKEN_INT 
  | 26 -> TOKEN_end_of_input
  | 24 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startmain 
    | 1 -> NONTERM_main 
    | 2 -> NONTERM_main 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_expr 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_expr 
    | 8 -> NONTERM_expr 
    | 9 -> NONTERM_expr 
    | 10 -> NONTERM_expr 
    | 11 -> NONTERM_expr 
    | 12 -> NONTERM_expr 
    | 13 -> NONTERM_expr 
    | 14 -> NONTERM_expr 
    | 15 -> NONTERM_expr 
    | 16 -> NONTERM_expr 
    | 17 -> NONTERM_expr 
    | 18 -> NONTERM_expr 
    | 19 -> NONTERM_expr 
    | 20 -> NONTERM_expr 
    | 21 -> NONTERM_expr 
    | 22 -> NONTERM_expr 
    | 23 -> NONTERM_if_expr 
    | 24 -> NONTERM_if_expr 
    | 25 -> NONTERM_if_body 
    | 26 -> NONTERM_if_body 
    | 27 -> NONTERM_pipe_expr 
    | 28 -> NONTERM_pipe_expr 
    | 29 -> NONTERM_pipe_entry 
    | 30 -> NONTERM_pipe_entry 
    | 31 -> NONTERM_arr 
    | 32 -> NONTERM_arr 
    | 33 -> NONTERM_element_list 
    | 34 -> NONTERM_element_list 
    | 35 -> NONTERM_funcblock 
    | 36 -> NONTERM_block 
    | 37 -> NONTERM_block 
    | 38 -> NONTERM_body_list 
    | 39 -> NONTERM_body_list 
    | 40 -> NONTERM_body_list 
    | 41 -> NONTERM_call 
    | 42 -> NONTERM_arg_list 
    | 43 -> NONTERM_arg_list 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 26 
let _fsyacc_tagOfErrorTerminal = 24

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIVIDE  -> "DIVIDE" 
  | AT  -> "AT" 
  | PIPE  -> "PIPE" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | LCURLY  -> "LCURLY" 
  | RCURLY  -> "RCURLY" 
  | EQ  -> "EQ" 
  | COMMA  -> "COMMA" 
  | SEMICOLON  -> "SEMICOLON" 
  | COLON  -> "COLON" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | EOF  -> "EOF" 
  | OPEQ _ -> "OPEQ" 
  | OP _ -> "OP" 
  | STRING _ -> "STRING" 
  | ID _ -> "ID" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | AT  -> (null : System.Object) 
  | PIPE  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | LCURLY  -> (null : System.Object) 
  | RCURLY  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | OPEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;22us;65535us;0us;21us;4us;5us;22us;22us;23us;8us;24us;7us;25us;9us;26us;10us;27us;11us;28us;12us;29us;13us;30us;14us;31us;15us;33us;16us;45us;17us;46us;18us;48us;18us;53us;19us;55us;20us;59us;20us;62us;21us;66us;21us;68us;22us;22us;65535us;0us;34us;4us;34us;22us;34us;23us;34us;24us;34us;25us;34us;26us;34us;27us;34us;28us;34us;29us;34us;30us;34us;31us;34us;33us;34us;45us;34us;46us;34us;48us;34us;53us;34us;55us;34us;59us;34us;62us;34us;66us;34us;68us;34us;2us;65535us;46us;47us;48us;49us;22us;65535us;0us;36us;4us;36us;22us;36us;23us;36us;24us;36us;25us;36us;26us;36us;27us;36us;28us;36us;29us;36us;30us;36us;31us;36us;33us;36us;45us;36us;46us;36us;48us;36us;53us;37us;55us;36us;59us;36us;62us;36us;66us;36us;68us;36us;22us;65535us;0us;52us;4us;52us;22us;52us;23us;52us;24us;52us;25us;52us;26us;52us;27us;52us;28us;52us;29us;52us;30us;52us;31us;52us;33us;52us;45us;52us;46us;52us;48us;52us;53us;51us;55us;52us;59us;52us;62us;52us;66us;52us;68us;52us;22us;65535us;0us;35us;4us;35us;22us;35us;23us;35us;24us;35us;25us;35us;26us;35us;27us;35us;28us;35us;29us;35us;30us;35us;31us;35us;33us;35us;45us;35us;46us;35us;48us;35us;53us;35us;55us;35us;59us;35us;62us;35us;66us;35us;68us;35us;2us;65535us;55us;57us;59us;60us;38us;65535us;0us;54us;4us;54us;5us;38us;7us;38us;8us;38us;9us;38us;10us;38us;11us;38us;12us;38us;13us;38us;14us;38us;15us;38us;16us;38us;17us;38us;18us;38us;19us;38us;20us;38us;21us;38us;22us;39us;23us;54us;24us;54us;25us;54us;26us;54us;27us;54us;28us;54us;29us;54us;30us;54us;31us;32us;33us;54us;45us;54us;46us;54us;48us;54us;53us;54us;55us;54us;59us;54us;62us;54us;66us;54us;68us;54us;38us;65535us;0us;61us;4us;61us;5us;61us;7us;61us;8us;61us;9us;61us;10us;61us;11us;61us;12us;61us;13us;61us;14us;61us;15us;61us;16us;61us;17us;61us;18us;61us;19us;61us;20us;61us;21us;61us;22us;61us;23us;61us;24us;61us;25us;61us;26us;61us;27us;61us;28us;61us;29us;61us;30us;61us;31us;61us;33us;61us;45us;61us;46us;50us;48us;50us;53us;61us;55us;61us;59us;61us;62us;61us;66us;61us;68us;61us;3us;65535us;0us;2us;62us;64us;66us;67us;22us;65535us;0us;42us;4us;42us;22us;42us;23us;42us;24us;42us;25us;42us;26us;42us;27us;42us;28us;42us;29us;42us;30us;42us;31us;42us;33us;42us;45us;42us;46us;42us;48us;42us;53us;42us;55us;42us;59us;42us;62us;42us;66us;42us;68us;42us;2us;65535us;22us;70us;68us;69us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;26us;49us;52us;75us;98us;121us;124us;163us;202us;206us;229us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;2us;1us;2us;1us;2us;1us;3us;12us;3us;4us;5us;6us;7us;8us;9us;10us;11us;12us;17us;29us;1us;3us;13us;4us;4us;5us;6us;7us;8us;9us;10us;11us;12us;13us;17us;29us;12us;4us;4us;5us;6us;7us;8us;9us;10us;11us;12us;17us;29us;12us;4us;5us;5us;6us;7us;8us;9us;10us;11us;12us;17us;29us;12us;4us;5us;6us;6us;7us;8us;9us;10us;11us;12us;17us;29us;12us;4us;5us;6us;7us;7us;8us;9us;10us;11us;12us;17us;29us;12us;4us;5us;6us;7us;8us;8us;9us;10us;11us;12us;17us;29us;12us;4us;5us;6us;7us;8us;9us;9us;10us;11us;12us;17us;29us;12us;4us;5us;6us;7us;8us;9us;10us;10us;11us;12us;17us;29us;12us;4us;5us;6us;7us;8us;9us;10us;11us;11us;12us;17us;29us;12us;4us;5us;6us;7us;8us;9us;10us;11us;12us;13us;17us;29us;13us;4us;5us;6us;7us;8us;9us;10us;11us;12us;17us;23us;24us;29us;12us;4us;5us;6us;7us;8us;9us;10us;11us;12us;17us;25us;29us;11us;4us;5us;6us;7us;8us;9us;10us;11us;12us;17us;29us;13us;4us;5us;6us;7us;8us;9us;10us;11us;12us;17us;29us;33us;34us;14us;4us;5us;6us;7us;8us;9us;10us;11us;12us;17us;29us;38us;39us;40us;13us;4us;5us;6us;7us;8us;9us;10us;11us;12us;17us;29us;42us;43us;1us;4us;3us;4us;13us;20us;1us;5us;1us;6us;1us;7us;1us;8us;1us;9us;1us;10us;2us;11us;12us;2us;12us;30us;2us;13us;20us;1us;14us;1us;15us;1us;16us;2us;16us;28us;1us;17us;2us;17us;30us;1us;18us;1us;19us;1us;21us;2us;22us;41us;2us;23us;24us;2us;23us;24us;2us;23us;24us;2us;23us;24us;1us;23us;1us;23us;2us;26us;35us;3us;27us;27us;28us;2us;27us;28us;2us;27us;28us;1us;30us;2us;31us;32us;1us;31us;1us;32us;1us;32us;1us;34us;1us;34us;1us;35us;2us;36us;37us;1us;36us;1us;37us;1us;37us;2us;39us;40us;1us;40us;1us;41us;1us;41us;1us;43us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;7us;9us;11us;24us;26us;40us;53us;66us;79us;92us;105us;118us;131us;144us;157us;171us;184us;196us;210us;225us;239us;241us;245us;247us;249us;251us;253us;255us;257us;260us;263us;266us;268us;270us;272us;275us;277us;280us;282us;284us;286us;289us;292us;295us;298us;301us;303us;305us;308us;312us;315us;318us;320us;323us;325us;327us;329us;331us;333us;335us;338us;340us;342us;344us;347us;349us;351us;353us;|]
let _fsyacc_action_rows = 71
let _fsyacc_actionTableElements = [|8us;32768us;6us;4us;8us;55us;10us;62us;16us;44us;20us;33us;21us;41us;22us;43us;23us;40us;0us;49152us;1us;16385us;14us;3us;0us;16386us;8us;32768us;6us;4us;8us;55us;10us;62us;16us;44us;20us;33us;21us;41us;22us;43us;23us;40us;10us;16413us;0us;25us;1us;26us;2us;27us;3us;28us;4us;29us;7us;6us;10us;62us;12us;31us;19us;30us;20us;23us;0us;16387us;9us;16388us;0us;25us;1us;26us;2us;27us;3us;28us;4us;29us;10us;62us;12us;31us;19us;30us;20us;23us;9us;16388us;0us;25us;1us;26us;2us;27us;3us;28us;4us;29us;10us;62us;12us;31us;19us;30us;20us;23us;7us;16389us;2us;27us;3us;28us;4us;29us;10us;62us;12us;31us;19us;30us;20us;23us;7us;16390us;2us;27us;3us;28us;4us;29us;10us;62us;12us;31us;19us;30us;20us;23us;5us;16391us;4us;29us;10us;62us;12us;31us;19us;30us;20us;23us;5us;16392us;4us;29us;10us;62us;12us;31us;19us;30us;20us;23us;4us;16393us;10us;62us;12us;31us;19us;30us;20us;23us;9us;16394us;0us;25us;1us;26us;2us;27us;3us;28us;4us;29us;10us;62us;12us;31us;19us;30us;20us;23us;9us;16395us;0us;25us;1us;26us;2us;27us;3us;28us;4us;29us;10us;62us;12us;31us;19us;30us;20us;23us;9us;16397us;0us;25us;1us;26us;2us;27us;3us;28us;4us;29us;10us;62us;12us;31us;19us;30us;20us;23us;10us;16413us;0us;25us;1us;26us;2us;27us;3us;28us;4us;29us;7us;46us;10us;62us;12us;31us;19us;30us;20us;23us;9us;16409us;0us;25us;1us;26us;2us;27us;3us;28us;4us;29us;10us;62us;12us;31us;19us;30us;20us;23us;9us;16413us;0us;25us;1us;26us;2us;27us;3us;28us;4us;29us;10us;62us;12us;31us;19us;30us;20us;23us;11us;16413us;0us;25us;1us;26us;2us;27us;3us;28us;4us;29us;9us;16417us;10us;62us;12us;31us;13us;59us;19us;30us;20us;23us;12us;16413us;0us;25us;1us;26us;2us;27us;3us;28us;4us;29us;10us;62us;11us;16422us;12us;31us;14us;66us;19us;30us;20us;23us;26us;16422us;20us;16426us;0us;25us;1us;26us;2us;27us;3us;28us;4us;29us;5us;16413us;6us;4us;8us;55us;10us;62us;12us;31us;15us;16413us;16us;44us;18us;16413us;19us;30us;20us;24us;21us;41us;22us;43us;23us;40us;24us;16413us;25us;16413us;8us;32768us;6us;4us;8us;55us;10us;62us;16us;44us;20us;33us;21us;41us;22us;43us;23us;40us;8us;16404us;6us;4us;8us;55us;10us;62us;16us;44us;20us;33us;21us;41us;22us;43us;23us;40us;8us;32768us;6us;4us;8us;55us;10us;62us;16us;44us;20us;33us;21us;41us;22us;43us;23us;40us;8us;32768us;6us;4us;8us;55us;10us;62us;16us;44us;20us;33us;21us;41us;22us;43us;23us;40us;8us;32768us;6us;4us;8us;55us;10us;62us;16us;44us;20us;33us;21us;41us;22us;43us;23us;40us;8us;32768us;6us;4us;8us;55us;10us;62us;16us;44us;20us;33us;21us;41us;22us;43us;23us;40us;8us;32768us;6us;4us;8us;55us;10us;62us;16us;44us;20us;33us;21us;41us;22us;43us;23us;40us;8us;32768us;6us;4us;8us;55us;10us;62us;16us;44us;20us;33us;21us;41us;22us;43us;23us;40us;8us;32768us;6us;4us;8us;55us;10us;62us;16us;44us;20us;33us;21us;41us;22us;43us;23us;40us;0us;16396us;8us;16404us;6us;4us;8us;55us;10us;62us;16us;44us;20us;33us;21us;41us;22us;43us;23us;40us;0us;16398us;0us;16399us;0us;16400us;0us;16400us;0us;16401us;0us;16401us;0us;16402us;0us;16403us;0us;16405us;1us;16406us;15us;68us;1us;32768us;6us;45us;8us;32768us;6us;4us;8us;55us;10us;62us;16us;44us;20us;33us;21us;41us;22us;43us;23us;40us;8us;32768us;6us;4us;8us;55us;10us;62us;16us;44us;20us;33us;21us;41us;22us;43us;23us;40us;1us;16408us;17us;48us;8us;32768us;6us;4us;8us;55us;10us;62us;16us;44us;20us;33us;21us;41us;22us;43us;23us;40us;0us;16407us;0us;16410us;1us;16411us;5us;53us;1us;32768us;5us;53us;8us;32768us;6us;4us;8us;55us;10us;62us;16us;44us;20us;33us;21us;41us;22us;43us;23us;40us;0us;16414us;9us;32768us;6us;4us;8us;55us;9us;56us;10us;62us;16us;44us;20us;33us;21us;41us;22us;43us;23us;40us;0us;16415us;1us;32768us;9us;58us;0us;16416us;8us;32768us;6us;4us;8us;55us;10us;62us;16us;44us;20us;33us;21us;41us;22us;43us;23us;40us;0us;16418us;0us;16419us;9us;32768us;6us;4us;8us;55us;10us;62us;11us;63us;16us;44us;20us;33us;21us;41us;22us;43us;23us;40us;0us;16420us;1us;32768us;11us;65us;0us;16421us;8us;16423us;6us;4us;8us;55us;10us;62us;16us;44us;20us;33us;21us;41us;22us;43us;23us;40us;0us;16424us;8us;32768us;6us;4us;8us;55us;10us;62us;16us;44us;20us;33us;21us;41us;22us;43us;23us;40us;0us;16425us;0us;16427us;|]
let _fsyacc_actionTableRowOffsets = [|0us;9us;10us;12us;13us;22us;33us;34us;44us;54us;62us;70us;76us;82us;87us;97us;107us;117us;128us;138us;148us;160us;173us;194us;203us;212us;221us;230us;239us;248us;257us;266us;275us;276us;285us;286us;287us;288us;289us;290us;291us;292us;293us;294us;296us;298us;307us;316us;318us;327us;328us;329us;331us;333us;342us;343us;353us;354us;356us;357us;366us;367us;368us;378us;379us;381us;382us;391us;392us;401us;402us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;2us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;2us;1us;1us;1us;2us;1us;1us;1us;1us;1us;7us;5us;1us;1us;3us;3us;1us;1us;2us;3us;1us;3us;1us;2us;3us;1us;2us;3us;3us;1us;2us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;1us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;2us;3us;3us;4us;4us;5us;5us;6us;6us;7us;7us;8us;8us;9us;10us;10us;11us;11us;11us;12us;13us;13us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16386us;65535us;65535us;16387us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16398us;16399us;16400us;65535us;16401us;65535us;16402us;16403us;16405us;65535us;65535us;65535us;65535us;65535us;65535us;16407us;65535us;65535us;65535us;65535us;16414us;65535us;16415us;65535us;16416us;65535us;16418us;16419us;65535us;16420us;65535us;16421us;65535us;16424us;65535us;16425us;16427us;|]
let _fsyacc_reductions = lazy [|
# 260 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> NS2.Ast.AST in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startmain));
# 269 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_body_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "Parser.fsy"
                                                Root _1 
                   )
# 29 "Parser.fsy"
                 : NS2.Ast.AST));
# 280 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_body_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                                                Root _1 
                   )
# 30 "Parser.fsy"
                 : NS2.Ast.AST));
# 291 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                                    _2 
                   )
# 33 "Parser.fsy"
                 : 'gentype_expr));
# 302 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                                Binop (_1, _2, _3) 
                   )
# 34 "Parser.fsy"
                 : 'gentype_expr));
# 315 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                              Binop (_1, "+", _3) 
                   )
# 35 "Parser.fsy"
                 : 'gentype_expr));
# 327 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                              Binop (_1, "-", _3) 
                   )
# 36 "Parser.fsy"
                 : 'gentype_expr));
# 339 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                              Binop (_1, "*", _3) 
                   )
# 37 "Parser.fsy"
                 : 'gentype_expr));
# 351 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                                Binop (_1, "/", _3) 
                   )
# 38 "Parser.fsy"
                 : 'gentype_expr));
# 363 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                             Index (_1, _3) 
                   )
# 39 "Parser.fsy"
                 : 'gentype_expr));
# 375 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                                            Assign (_1, Binop(_1, _2[.._2.Length-2], _3))
                   )
# 40 "Parser.fsy"
                 : 'gentype_expr));
# 388 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                                            Assign (_1, _3)
                   )
# 41 "Parser.fsy"
                 : 'gentype_expr));
# 400 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_funcblock in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                                            Assign (_1, _3)
                   )
# 42 "Parser.fsy"
                 : 'gentype_expr));
# 412 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                                            Unaryop (_1, _2)
                   )
# 43 "Parser.fsy"
                 : 'gentype_expr));
# 424 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_if_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                                            _1 
                   )
# 44 "Parser.fsy"
                 : 'gentype_expr));
# 435 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_arr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                      _1 
                   )
# 45 "Parser.fsy"
                 : 'gentype_expr));
# 446 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pipe_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                          Pipe _1 
                   )
# 46 "Parser.fsy"
                 : 'gentype_expr));
# 457 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _2 = parseState.GetInput(2) :?> 'gentype_funcblock in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                              Map (_1, _2) 
                   )
# 47 "Parser.fsy"
                 : 'gentype_expr));
# 469 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                     Int _1 
                   )
# 48 "Parser.fsy"
                 : 'gentype_expr));
# 480 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                       String _1 
                   )
# 49 "Parser.fsy"
                 : 'gentype_expr));
# 491 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                    Id _1 
                   )
# 50 "Parser.fsy"
                 : 'gentype_expr));
# 502 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_call in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                         _1 
                   )
# 51 "Parser.fsy"
                 : 'gentype_expr));
# 513 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                    Id _1 
                   )
# 52 "Parser.fsy"
                 : 'gentype_expr));
# 524 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_if_body in
            let _7 = parseState.GetInput(7) :?> 'gentype_if_body in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                                             If(_3,_5,Some _7)
                   )
# 55 "Parser.fsy"
                 : 'gentype_if_expr));
# 537 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_expr in
            let _5 = parseState.GetInput(5) :?> 'gentype_if_body in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                                             If(_3,_5, None)
                   )
# 56 "Parser.fsy"
                 : 'gentype_if_expr));
# 549 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                              _1
                   )
# 59 "Parser.fsy"
                 : 'gentype_if_body));
# 560 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                              _1
                   )
# 60 "Parser.fsy"
                 : 'gentype_if_body));
# 571 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pipe_entry in
            let _3 = parseState.GetInput(3) :?> 'gentype_pipe_entry in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                                     [_1;_3] 
                   )
# 64 "Parser.fsy"
                 : 'gentype_pipe_expr));
# 583 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pipe_entry in
            let _3 = parseState.GetInput(3) :?> 'gentype_pipe_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                                     _1::_3 
                   )
# 65 "Parser.fsy"
                 : 'gentype_pipe_expr));
# 595 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                                              _1
                   )
# 68 "Parser.fsy"
                 : 'gentype_pipe_entry));
# 606 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_funcblock in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                              _1
                   )
# 69 "Parser.fsy"
                 : 'gentype_pipe_entry));
# 617 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                             Array [] 
                   )
# 72 "Parser.fsy"
                 : 'gentype_arr));
# 627 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_element_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                                      Array _2 
                   )
# 73 "Parser.fsy"
                 : 'gentype_arr));
# 638 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                      [_1] 
                   )
# 76 "Parser.fsy"
                 : 'gentype_element_list));
# 649 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_element_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                                     _1 :: _3 
                   )
# 77 "Parser.fsy"
                 : 'gentype_element_list));
# 661 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                                               Func _1 
                   )
# 80 "Parser.fsy"
                 : 'gentype_funcblock));
# 672 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                             Block [] 
                   )
# 83 "Parser.fsy"
                 : 'gentype_block));
# 682 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_body_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                                    Block _2 
                   )
# 84 "Parser.fsy"
                 : 'gentype_block));
# 693 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                      [_1] 
                   )
# 87 "Parser.fsy"
                 : 'gentype_body_list));
# 704 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                             [_1] 
                   )
# 88 "Parser.fsy"
                 : 'gentype_body_list));
# 715 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _3 = parseState.GetInput(3) :?> 'gentype_body_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                                      _1 :: _3 
                   )
# 89 "Parser.fsy"
                 : 'gentype_body_list));
# 727 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_arg_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                                     Call (_1, _3)
                   )
# 92 "Parser.fsy"
                 : 'gentype_call));
# 739 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                      [_1] 
                   )
# 95 "Parser.fsy"
                 : 'gentype_arg_list));
# 750 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            let _2 = parseState.GetInput(2) :?> 'gentype_arg_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                                   _1 :: _2 
                   )
# 96 "Parser.fsy"
                 : 'gentype_arg_list));
|]
# 763 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 27;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let main lexer lexbuf : NS2.Ast.AST =
    engine lexer lexbuf 0 :?> _
