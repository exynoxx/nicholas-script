%{
open System
open NS2.Ast
%}

%start main
%type <NS2.Ast.AST> main

%token <int> INT
%token <string> ID
%token <string> STRING
%token <string> OPEQ
%token 
	PLUS MINUS TIMES DIVIDE AT PIPE HASH 
	EQ NEQ EQEQ GE LE GEQ LEQ AND OR NOT MODULO
	LPAREN RPAREN LBRACK RBRACK LCURLY RCURLY
	COMMA SEMICOLON COLON NEWLINE
	IF ELSE WHILE
	EOF

%left AND OR
%left GE LE GEQ LEQ EQEQ NEQ
%left PLUS MINUS
%left TIMES DIVIDE MODULO
%right NOT
%left AT

%%

main:
	  body_list             { Root $1 }
	| body_list SEMICOLON   { Root $1 }
	| body_list NEWLINE     { Root $1 }

expr:
      LPAREN expr RPAREN 				{ $2 }
    | NEWLINE expr                      { $2 }
	| expr op expr	 				    { Binop ($1, $2, $3) }
	| expr PLUS expr	 				{ Binop ($1, "+", $3) }
	| expr MINUS expr					{ Binop ($1, "-", $3) }
	| expr TIMES expr					{ Binop ($1, "*", $3) }
	| expr DIVIDE expr 					{ Binop ($1, "/", $3) }
	| expr MODULO expr                  { Binop($1, "%", $3) }
    
    | expr EQEQ expr                    { Binop($1, "==", $3) }
    | expr NEQ expr                     { Binop($1, "!=", $3) }
    | expr GE expr                      { Binop($1, ">",  $3) }
    | expr LE expr                      { Binop($1, "<",  $3) }
    | expr GEQ expr                     { Binop($1, ">=", $3) }
    | expr LEQ expr                     { Binop($1, "<=", $3) }

    | expr AND expr                     { Binop($1, "&&", $3) }
    | expr OR expr                      { Binop($1, "||", $3) }
	
	| expr AT expr 						{ Index ($1, $3) }
	| expr OPEQ expr                    { Assign ($1, Binop($1, $2[..$2.Length-2], $3))}
	| expr EQ expr                      { Assign ($1, $3)}
	| op expr                           { Unaryop ($1, $2)}
	| if_expr                           { $1 }
	| while_expr                        { $1 }
	| arr 								{ $1 }
	| pipe_expr 						{ Pipe $1 }
	| expr block 					    { Map ($1, $2) }
	| block					            { $1 }
	| INT								{ Int $1 }
	| STRING							{ String $1 }
	| op								{ Id $1 }
	| call							    { $1 }
	| ID								{ Id $1 }
	
op:
    | HASH      { "#"  }
    | NOT       { "!"  }

while_expr:
    WHILE LPAREN expr RPAREN expr { While ($3,$5) }

if_expr:
      IF LPAREN expr RPAREN expr ELSE expr       {If($3,$5,Some $7)}
    | IF LPAREN expr RPAREN expr                 {If($3,$5, None)}

pipe_expr:
      expr PIPE expr                    { [$1;$3] }
    | expr PIPE pipe_expr               { $1::$3 }

arr:
	  LBRACK RBRACK						{ Array [] }
	| LBRACK element_list RBRACK		{ Array $2 }

element_list:
	  expr								{ [$1] }
	| expr COMMA element_list 			{ $1 :: $3 }

block:
	  LCURLY RCURLY						{ Block [] }
	| LCURLY body_list RCURLY			{ Block $2 }
	
body_list:
	  expr								{ [$1] }
	| expr SEMICOLON					{ [$1] }
	| expr NEWLINE					    { [$1] }
	| expr SEMICOLON body_list 			{ $1 :: $3 }
	| expr NEWLINE body_list 			{ $1 :: $3 }
	
call:
    ID COLON arg_list                         { Call ($1, $3)}

arg_list:
	  expr								{ [$1] }
	| expr arg_list 			        { $1 :: $2 }
    
    