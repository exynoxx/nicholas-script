%{
open System
open NS2.Ast
%}

%start main
%type <NS2.Ast.AST> main

%token <int> INT
%token <string> ID
%token <string> STRING
%token 
	PLUS MINUS TIMES DIVIDE AT POW
	LPAREN RPAREN LBRACK RBRACK LCURLY RCURLY
	EQ
	COMMA SEMICOLON
	EOF

%left PLUS MINUS
%left TIMES DIVIDE
%left POW
%left AT

%%

main:
	body_list { Root $1 }

expr:
      LPAREN expr RPAREN 				{ $2 }
	| expr PLUS expr	 				{ Binop ($1, "+", $3) }
	| expr MINUS expr					{ Binop ($1, "-", $3) }
	| expr TIMES expr					{ Binop ($1, "*", $3) }
	| expr POW expr						{ Binop ($1, "**", $3) }
	| expr DIVIDE expr 					{ Binop ($1, "/", $3) }
	| expr EQ expr                      { Assign ($1, $3)}
	| arr 								{ $1 }
	| expr AT expr 						{ Index ($1, $3) }
	| func 								{ $1 }
	| expr func 						{ Map ($1, $2) }
	| INT								{ Int $1 }
	| STRING							{ String $1 }
	| call							    { $1 }
	| ID								{ Id $1 }

arr:
	  LBRACK RBRACK						{ Array [] }
	| LBRACK element_list RBRACK		{ Array $2 }

element_list:
	  expr								{ [$1] }
	| expr COMMA element_list 			{ $1 :: $3 }
	
func:
	  LCURLY RCURLY						{ Func [] }
	| LCURLY body_list RCURLY			{ Func $2 }
	
body_list:
	  expr								{ [$1] }
	| expr SEMICOLON					{ [$1] }
	| expr SEMICOLON body_list 			{ $1 :: $3 }
	
call:
    ID arg_list                         { Call ($1, $2)}

arg_list:
	  expr								{ [$1] }
	| expr arg_list 			        { $1 :: $2 }
    
    