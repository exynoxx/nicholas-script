concat := (x:string, y:string):string => ?$ return format!("{}{}", x, y) ?$;

a := (x:int) => 1+1;
b:= a: 1;
poly := (x:int) => 5*x**3 + 3*x**2 + 1*x;

println: (concat: (toString: (poly:5)) (toString: (poly:b)));
pow := (x:int,y:int) => x**y;
println: (toString: (pow: 2 10));
println: (toString: 2**10);
world := "world";
s := concat: (concat: (concat: "hello"  " ") world) "!";
println: s;
print3 := (a:string,b:string,c:string) => ?$ println!("{}{}{}",a,b,c); ?$;
print3: "hello" " " world;

fg := (f: (int)=>int, g: (int)=>int, x:int) => f: (g: x);
square := (x:int)=>x**2;
val := fg: square square 5;
println: (toString: val);

factory :=  () => {
	return (x:int) => 5+x;
};

addFive := factory:;
println: (toString: (addFive: 3));

sum := (l:[int]) => {
	tmp := 0;
	for (e in l) tmp += e;
	return tmp;
};

integer := sum: [1,2,3];

map := (f: (int)=>int, l:[int]) => {
	var tmp:[int] = [];
	for (e in l) ?$ tmp.push (f(e)); ?$
	return tmp;
};

integer2 := sum: (map: ((x:int) => x**2) [1,2,3]);

fac := (x:int):int => {
	if (x==1) {
		return 1;
	}

	tmp := fac: x-1;
	return tmp*x;
};
fac: 5;

