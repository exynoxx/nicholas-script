printArr := (x:[int]) => {
	for ( e in x ){
		print: e;
	}
	println: "";
};

map := (f: (int)=>int, l:[int]) => {
	var tmp:[int] = [];
	for (e in l) ?$ tmp.push (f(e)); ?$
	return tmp;
};

sum := (l:[int]) => {
	tmp := 0;
	for (e in l) tmp += e;
	return tmp;
};

printArr: (map: ((x:int) => x*2) 1..5);
println: (sum: [1,2,3,4]);

fg := (f: (int)=>int, g: (int)=>int, x:int) => f: (g: x);
square := (x:int)=>x**2;
val := fg: square square 5;
println: val;

add :=  (x:int) => {
	return (y:int) => x+y;
};

addFive := add: 5;
println: (addFive: 3);

factory :=  () => {
	return (x:int) => 5+x;
};

addFive := factory:;
println: (addFive: 3);
arrayToString := (l:[int]) => {
	for (e in l) print: e;
	println: "";
};


point := {
	x:int,
	y:int,
	sum: ()=>x+y,
	toString: ():string=> ns(x) + ns(y),
};

p:=point(0,1,ns("yo"));
p.x = 1;
p.y += 2;
sum := p.sum:;
println: sum;


vec2 := {
	x:int,
	y:int,
	override +: (this:vec2, other:vec2):vec2 =>  vec2(this.x+other.x,this.y+other.y),
};
